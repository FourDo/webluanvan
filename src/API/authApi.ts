import apiClient from "../ultis/apiClient"; // Correct path and name
import type {
  RegisterCredentials,
  RegisterResponse,
  LoginCredentials,
  LoginResponse,
  LogoutResponse,
  UpdateUserCredentials,
  UpdateUserResponse,
  ResetPasswordCredentials,
  GetUserInfoResponse,
} from "../types/auth";

const authApi = {
  register: (credentials: RegisterCredentials): Promise<RegisterResponse> =>
    apiClient
      .post("/auth/register", credentials)
      .then((res) => res.data)
      .catch(() => {
        throw new Error("ƒêƒÉng k√Ω th·∫•t b·∫°i‚Ä¶");
      }),

  login: (credentials: LoginCredentials): Promise<LoginResponse> =>
    apiClient
      .post("/auth/login", credentials)
      .then((res) => res.data)
      .catch((error) => {
        console.error("üîç AuthAPI Login Error:", error);
        console.error("üîç Error Response:", error.response);
        console.error("üîç Error Status:", error.response?.status);
        console.error("üîç Error Data:", error.response?.data);

        // Gi·ªØ nguy√™n error g·ªëc ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p response
        throw error;
      }),

  logout: (): Promise<LogoutResponse> =>
    apiClient
      .post("/auth/logout", {})
      .then((res) => res.data)
      .catch((error) => {
        console.error("Logout error:", error);
        throw new Error("ƒêƒÉng xu·∫•t sai, nh∆∞ng client v·∫´n ƒë∆∞·ª£c logout.");
      }),

  forgotPasswordSendOtp: (email: string): Promise<{ message: string }> =>
    apiClient
      .post("/forgot-password/send-otp", { email })
      .then((res) => res.data)
      .catch(() => {
        throw new Error("G·ª≠i OTP th·∫•t b·∫°i‚Ä¶");
      }),

  forgotPasswordVerifyOtp: (
    email: string,
    otp: string
  ): Promise<{ message: string }> =>
    apiClient
      .post("/forgot-password/verify-otp", { email, otp })
      .then((res) => res.data)
      .catch(() => {
        throw new Error("X√°c th·ª±c OTP th·∫•t b·∫°i‚Ä¶");
      }),

  forgotPasswordReset: (
    email: string,
    new_password: string,
    new_password_confirmation: string
  ): Promise<{ message: string }> =>
    apiClient
      .post("/forgot-password/reset", {
        email,
        new_password,
        new_password_confirmation,
      })
      .then((res) => res.data)
      .catch(() => {
        throw new Error("Reset m·∫≠t kh·∫©u th·∫•t b·∫°i‚Ä¶");
      }),

  updateUser: (
    credentials: UpdateUserCredentials
  ): Promise<UpdateUserResponse> =>
    apiClient
      .put("/auth/update", credentials)
      .then((res) => res.data)
      .catch(() => {
        throw new Error("C·∫≠p nh·∫≠t th√¥ng tin th·∫•t b·∫°i‚Ä¶");
      }),
  resetpassword: (
    resetpasswordCredentials: ResetPasswordCredentials
  ): Promise<{ message: string }> =>
    apiClient
      .post("/auth/doi-mat-khau", resetpasswordCredentials)
      .then((res) => res.data)
      .catch(() => {
        throw new Error("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th·∫•t b·∫°i‚Ä¶");
      }),

  getUserInfo: (): Promise<GetUserInfoResponse> =>
    apiClient
      .get("/auth/me")
      .then((res) => res.data)
      .catch(() => {
        throw new Error("L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th·∫•t b·∫°i‚Ä¶");
      }),
};

export default authApi;
