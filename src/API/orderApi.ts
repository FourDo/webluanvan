import apiClient from "../ultis/apiClient";

export interface ChiTietDonHang {
  id: number;
  ma_don_hang: number;
  ma_bien_the: number;
  ten_san_pham: string;
  mau_sac: string;
  kich_thuoc: string;
  so_luong: number;
  gia_goc: number;
  loai_khuyen_mai: string;
  gia_khuyen_mai: number;
  gia_sau_km: number;
}

export interface DonHang {
  ma_don_hang: number;
  ma_nguoi_dung: number;
  ten_nguoi_nhan: string;
  so_dien_thoai: string;
  dia_chi_giao: string;
  hinh_thuc_thanh_toan: string;
  tong_tien: string;
  phi_van_chuyen: string;
  tong_thanh_toan: string;
  ghi_chu?: string;
  trang_thai: string;
  Ngay_Tao: string;
  Ngay_Cap_Nhat: string;
  ngay_thanh_toan: string | null;
  da_thanh_toan: number; // 0: ch∆∞a thanh to√°n, 1: ƒë√£ thanh to√°n
  don_vi_van_chuyen?: string | null;
  ma_van_don?: string | null;
  ngay_du_kien_giao?: string | null;
}

export interface OrderDetailResponse {
  message: string;
  don_hang: DonHang;
  chi_tiet: ChiTietDonHang[];
}

export interface ChiTietDonHangPayload {
  ma_bien_the: number;
  ten_san_pham: string;
  mau_sac: string;
  kich_thuoc: string;
  so_luong: number;
  gia_goc: number;
  loai_khuyen_mai: string;
  gia_khuyen_mai: number;
  gia_sau_km: number;
}

export interface DonHangPayload {
  ma_nguoi_dung: number;
  ten_nguoi_nhan: string;
  so_dien_thoai: string;
  dia_chi_giao: string;
  hinh_thuc_thanh_toan: string;
  tong_tien: string;
  phi_van_chuyen: string;
  tong_thanh_toan: string;
  ghi_chu?: string;
  chi_tiet: ChiTietDonHangPayload[];
}

export const orderApi = {
  // T·∫°o ƒë∆°n h√†ng m·ªõi
  createOrder: (payload: DonHangPayload) => {
    // Log payload ƒë·ªÉ debug chi ti·∫øt
    console.log(
      "üîç Payload ƒë∆∞·ª£c g·ª≠i (chi ti·∫øt):",
      JSON.stringify(payload, null, 2)
    );

    // Validate t·ª´ng chi ti·∫øt s·∫£n ph·∫©m chi ti·∫øt h∆°n
    payload.chi_tiet.forEach((item, index) => {
      console.log(`üì¶ Chi ti·∫øt s·∫£n ph·∫©m [${index}]:`, {
        ma_bien_the: item.ma_bien_the,
        ten_san_pham: item.ten_san_pham,
        mau_sac: item.mau_sac,
        kich_thuoc: item.kich_thuoc,
        so_luong: item.so_luong,
        gia_goc: item.gia_goc,
        loai_khuyen_mai: item.loai_khuyen_mai,
        gia_khuyen_mai: item.gia_khuyen_mai,
        gia_sau_km: item.gia_sau_km,
      });

      if (!item.ma_bien_the || item.ma_bien_the <= 0) {
        console.warn(
          `‚ö†Ô∏è C·∫£nh b√°o: ma_bien_the kh√¥ng h·ª£p l·ªá cho s·∫£n ph·∫©m ${index}:`,
          item.ma_bien_the
        );
      }
      if (!item.ten_san_pham || item.ten_san_pham.trim() === "") {
        console.warn(`‚ö†Ô∏è C·∫£nh b√°o: ten_san_pham tr·ªëng cho s·∫£n ph·∫©m ${index}`);
      }
      if (item.loai_khuyen_mai && item.loai_khuyen_mai.length > 0) {
        console.warn(
          `‚ö†Ô∏è C·∫£nh b√°o: loai_khuyen_mai c√≥ gi√° tr·ªã cho s·∫£n ph·∫©m ${index}:`,
          item.loai_khuyen_mai
        );
      }
    });

    // Validate payload structure tr∆∞·ªõc khi g·ª≠i
    if (
      !payload.ma_nguoi_dung ||
      !payload.ten_nguoi_nhan ||
      !payload.chi_tiet?.length ||
      !payload.tong_tien ||
      !payload.phi_van_chuyen ||
      !payload.tong_thanh_toan
    ) {
      throw new Error("Payload thi·∫øu th√¥ng tin b·∫Øt bu·ªôc");
    }

    // Validate gi√° tr·ªã s·ªë
    if (
      Number(payload.tong_tien) <= 0 ||
      Number(payload.phi_van_chuyen) < 0 ||
      Number(payload.tong_thanh_toan) <= 0
    ) {
      throw new Error("Gi√° tr·ªã ti·ªÅn kh√¥ng h·ª£p l·ªá");
    }

    // T·∫°o payload cleaned-up ƒë·ªÉ g·ª≠i
    const cleanedPayload = {
      ma_nguoi_dung: payload.ma_nguoi_dung,
      ten_nguoi_nhan: payload.ten_nguoi_nhan.trim(),
      so_dien_thoai: payload.so_dien_thoai.trim(),
      dia_chi_giao: payload.dia_chi_giao.trim(),
      hinh_thuc_thanh_toan: payload.hinh_thuc_thanh_toan,
      tong_tien: payload.tong_tien,
      phi_van_chuyen: payload.phi_van_chuyen,
      tong_thanh_toan: payload.tong_thanh_toan,
      ghi_chu: payload.ghi_chu || "",
      chi_tiet: payload.chi_tiet.map((item) => ({
        ma_bien_the: item.ma_bien_the,
        ten_san_pham: item.ten_san_pham.trim(),
        mau_sac: item.mau_sac || "",
        kich_thuoc: item.kich_thuoc || "",
        so_luong: item.so_luong,
        gia_goc: item.gia_goc,
        loai_khuyen_mai: "", // ƒê·ªÉ tr·ªëng thay v√¨ "Kh√¥ng c√≥"
        gia_khuyen_mai: 0,
        gia_sau_km: item.gia_sau_km,
      })),
    };

    console.log("üöÄ Cleaned payload s·∫Ω ƒë∆∞·ª£c g·ª≠i:", cleanedPayload);

    return apiClient
      .post("/don-hang", cleanedPayload)
      .then((res) => res.data)
      .catch((error) => {
        console.error("‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng:", error);

        // Log chi ti·∫øt l·ªói t·ª´ response
        if (error.response?.data) {
          console.error("üìù Chi ti·∫øt l·ªói t·ª´ server:", error.response.data);

          // Log chi ti·∫øt errors n·∫øu c√≥
          if (error.response.data.errors) {
            console.error("üîç Chi ti·∫øt t·ª´ng l·ªói:");
            Object.keys(error.response.data.errors).forEach((field) => {
              console.error(
                `   - ${field}:`,
                error.response.data.errors[field]
              );
            });
          }
        }

        // Tr·∫£ v·ªÅ l·ªói v·ªõi th√¥ng tin chi ti·∫øt h∆°n
        const errorMessage =
          error.response?.data?.message ||
          error.response?.data?.error ||
          "T·∫°o ƒë∆°n h√†ng th·∫•t b·∫°i";
        throw new Error(errorMessage);
      });
  },

  // L·∫•y chi ti·∫øt ƒë∆°n h√†ng theo ID
  getOrderDetail: (orderId: string | number) =>
    apiClient
      .get<OrderDetailResponse>(`/donhang/chitietdonhang/${orderId}`)
      .then((res) => {
        console.log("üìã Response t·ª´ API getOrderDetail:", res.data);
        return res.data;
      })
      .catch((error) => {
        console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", error);

        if (error.response?.status === 404) {
          throw new Error("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng");
        }

        throw new Error("L·∫•y chi ti·∫øt ƒë∆°n h√†ng th·∫•t b·∫°i.");
      }),

  // L·∫•y danh s√°ch ƒë∆°n h√†ng theo m√£ ng∆∞·ªùi d√πng
  getOrdersByUserId: (userId: number) =>
    apiClient
      .get(`/donhang/${userId}`)
      .then((res) => {
        console.log("üìã Response t·ª´ API getOrdersByUserId:", res.data);

        // Ki·ªÉm tra c·∫•u tr√∫c response
        if (res.data.data && Array.isArray(res.data.data)) {
          // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ {message, data: [...]}
          return {
            don_hang: res.data.data,
            message: res.data.message || "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng",
          };
        } else if (res.data.don_hang && Array.isArray(res.data.don_hang)) {
          // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ {don_hang: [...]}
          return res.data;
        } else {
          // Fallback: tr·∫£ v·ªÅ d·ªØ li·ªáu tr·ªëng
          console.warn("‚ö†Ô∏è C·∫•u tr√∫c response kh√¥ng nh∆∞ mong ƒë·ª£i:", res.data);
          return {
            don_hang: [],
            message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o",
          };
        }
      })
      .catch((error) => {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:", error);

        if (error.response?.status === 404) {
          // Tr·∫£ v·ªÅ d·ªØ li·ªáu tr·ªëng thay v√¨ throw error
          return { don_hang: [], message: "Kh√°ch h√†ng ch∆∞a c√≥ ƒë∆°n h√†ng n√†o" };
        }

        throw new Error("L·∫•y danh s√°ch ƒë∆°n h√†ng th·∫•t b·∫°i.");
      }),

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
  updateOrderStatus: (orderId: number, status: string) =>
    apiClient
      .patch(`/donhang/${orderId}`, { trang_thai: status })
      .then((res) => {
        console.log("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng:", res.data);
        return res.data;
      })
      .catch((error) => {
        console.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:", error);
        throw new Error("C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th·∫•t b·∫°i.");
      }),

  // Ho√†n tr·∫£ ti·ªÅn VNPay
  refundVNPay: (orderId: number) =>
    apiClient
      .post(`/refundvnpay/${orderId}`)
      .then((res) => {
        console.log("üí∞ Ho√†n tr·∫£ ti·ªÅn th√†nh c√¥ng:", res.data);
        return res.data;
      })
      .catch((error) => {
        console.error("‚ùå L·ªói ho√†n tr·∫£ ti·ªÅn:", error);
        throw new Error("Ho√†n tr·∫£ ti·ªÅn th·∫•t b·∫°i.");
      }),

  // L·∫•y danh s√°ch ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n
  getPendingOrders: () =>
    apiClient
      .get("/qldonhang/dsdhchoxacnhan")
      .then((res) => {
        console.log("üìã Response t·ª´ API getPendingOrders:", res.data);

        // Ki·ªÉm tra c·∫•u tr√∫c response
        if (res.data.data && Array.isArray(res.data.data)) {
          // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ {message, data: [...]}
          return {
            don_hang: res.data.data,
            message:
              res.data.message ||
              "L·∫•y danh s√°ch ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n th√†nh c√¥ng",
          };
        } else if (res.data.don_hang && Array.isArray(res.data.don_hang)) {
          // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ {don_hang: [...]}
          return res.data;
        } else if (Array.isArray(res.data)) {
          // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ tr·ª±c ti·∫øp array
          return {
            don_hang: res.data,
            message: "L·∫•y danh s√°ch ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n th√†nh c√¥ng",
          };
        } else {
          // Fallback: tr·∫£ v·ªÅ d·ªØ li·ªáu tr·ªëng
          console.warn("‚ö†Ô∏è C·∫•u tr√∫c response kh√¥ng nh∆∞ mong ƒë·ª£i:", res.data);
          return {
            don_hang: [],
            message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n n√†o",
          };
        }
      })
      .catch((error) => {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n:", error);

        if (error.response?.status === 404) {
          // Tr·∫£ v·ªÅ d·ªØ li·ªáu tr·ªëng thay v√¨ throw error
          return {
            don_hang: [],
            message: "Kh√¥ng c√≥ ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n n√†o",
          };
        }

        throw new Error("L·∫•y danh s√°ch ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n th·∫•t b·∫°i.");
      }),

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng cho qu·∫£n l√Ω
  updateOrderStatusQL: (orderId: number, status: string) =>
    apiClient
      .put(`/qldonhang/${orderId}`, { trang_thai: status })
      .then((res) => {
        console.log(
          "‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng (QL) th√†nh c√¥ng:",
          res.data
        );
        return res.data;
      })
      .catch((error) => {
        console.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng (QL):", error);
        throw new Error("C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th·∫•t b·∫°i.");
      }),

  // Y√™u c·∫ßu h·ªßy ho·∫∑c tr·∫£ h√†ng
  requestCancelReturn: (
    orderId: number,
    requestData: { yeu_cau_huy_tra: string; ly_do_huy_tra: string }
  ) =>
    apiClient
      .post(`/ghn/yeucauhuytra/${orderId}`, requestData)
      .then((res) => {
        console.log("‚úÖ Y√™u c·∫ßu h·ªßy/tr·∫£ h√†ng th√†nh c√¥ng:", res.data);
        return res.data;
      })
      .catch((error) => {
        console.error("‚ùå L·ªói khi y√™u c·∫ßu h·ªßy/tr·∫£ h√†ng:", error);
        throw new Error(
          error.response?.data?.message || "Y√™u c·∫ßu h·ªßy/tr·∫£ h√†ng th·∫•t b·∫°i."
        );
      }),
};

// Export c√°c h√†m ri√™ng l·∫ª ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
export const createOrder = orderApi.createOrder;
export const getOrderDetail = orderApi.getOrderDetail;
export const getOrdersByUserId = orderApi.getOrdersByUserId;
export const updateOrderStatus = orderApi.updateOrderStatus;
export const updateOrderStatusQL = orderApi.updateOrderStatusQL;
export const refundVNPay = orderApi.refundVNPay;
export const getPendingOrders = orderApi.getPendingOrders;
export const requestCancelReturn = orderApi.requestCancelReturn;

export default orderApi;
