import React, { useState, useEffect, useRef } from "react";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { productApi } from "../API/productApi";
import type { Product } from "../types/Product";
import { Link } from "react-router-dom";
import { Send, Bot, X } from "lucide-react";

const API_KEY = "AIzaSyAAP-1OqLhEfCiJrWNH_xmXB2dVp2f-Df4";
const MODEL_NAME = "gemini-2.5-flash-lite";

const genAI = new GoogleGenerativeAI(API_KEY);

interface Message {
  sender: "user" | "bot";
  text: string | React.ReactNode;
}

const SmartChatBox: React.FC = () => {
  const [isChatting, setIsChatting] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      sender: "bot",
      text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa c·ª≠a h√†ng. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ s·∫£n ph·∫©m, t∆∞ v·∫•n mua s·∫Øm v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ kh√¥ng? üòä",
    },
  ]);
  const [input, setInput] = useState("");
  const [products, setProducts] = useState<Product[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const chatContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Fetch products when the component mounts
    productApi
      .getProducts()
      .then((res) => {
        if (res.data && Array.isArray(res.data)) {
          setProducts(res.data);
        } else if (res.data) {
          setProducts([res.data]);
        }
      })
      .catch((err) => console.error("Failed to fetch products:", err));
  }, []);

  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop =
        chatContainerRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSend = async () => {
    if (!input.trim()) return;

    const userMessage: Message = { sender: "user", text: input };
    setMessages((prev) => [...prev, userMessage]);
    setInput("");
    setIsLoading(true);

    try {
      const chat = genAI.getGenerativeModel({ model: MODEL_NAME });
      const productContext = products
        .map((p) => {
          const firstVariant = p.bienthe?.[0];
          const price = firstVariant?.gia_ban || "0";
          const variants =
            p.bienthe
              ?.map((v) => `${v.ten_mau_sac} (${v.ten_kich_thuoc})`)
              .join(", ") || "";

          return `T√™n: ${p.ten_san_pham}
Th∆∞∆°ng hi·ªáu: ${p.thuong_hieu}
Danh m·ª•c: ${p.ten_danh_muc || "Ch∆∞a ph√¢n lo·∫°i"}
Ch·∫•t li·ªáu: ${p.chat_lieu}
Gi√°: ${parseFloat(price).toLocaleString("vi-VN")} VND
Bi·∫øn th·ªÉ c√≥ s·∫µn: ${variants}
S·ªë l∆∞·ª£ng t·ªìn: ${firstVariant?.so_luong_ton || 0}`;
        })
        .join("\n\n");

      // Ki·ªÉm tra n·∫øu kh√°ch h·ªèi v·ªÅ ƒë∆°n h√†ng
      const orderKeywords = [
        "ƒë∆°n h√†ng",
        "order",
        "mua h√†ng",
        "thanh to√°n",
        "giao h√†ng",
        "ƒë·∫∑t h√†ng",
        "tr·∫°ng th√°i ƒë∆°n",
      ];
      const isOrderInquiry = orderKeywords.some((keyword) =>
        input.toLowerCase().includes(keyword)
      );

      if (isOrderInquiry) {
        const orderResponse =
          "ƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† h·ªó tr·ª£ v·ªÅ ƒë∆°n h√†ng, qu√Ω kh√°ch vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch√∫ng t√¥i qua s·ªë ƒëi·ªán tho·∫°i: **0782352282**. ƒê·ªôi ng≈© t∆∞ v·∫•n vi√™n s·∫Ω h·ªó tr·ª£ b·∫°n 24/7! üìû";
        const botMessage: Message = { sender: "bot", text: orderResponse };
        setMessages((prev) => [...prev, botMessage]);
        setIsLoading(false);
        return;
      }

      // Ki·ªÉm tra n·∫øu kh√°ch h·ªèi c·ª• th·ªÉ v·ªÅ th∆∞∆°ng hi·ªáu
      const brandKeywords = ["th∆∞∆°ng hi·ªáu", "brand", "h√£ng", "c·ªßa"];
      const isBrandSpecific = brandKeywords.some((keyword) =>
        input.toLowerCase().includes(keyword)
      );

      const prompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω mua s·∫Øm th√¥ng minh cho c·ª≠a h√†ng n·ªôi th·∫•t. D∆∞·ªõi ƒë√¢y l√† danh s√°ch s·∫£n ph·∫©m v·ªõi th√¥ng tin chi ti·∫øt:

${productContext}

Khi kh√°ch h√†ng h·ªèi v·ªÅ s·∫£n ph·∫©m, h√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán v√† cung c·∫•p th√¥ng tin h·ªØu √≠ch. ƒê·∫∑c bi·ªát ch√∫ √Ω:
- Khi kh√°ch h√†ng h·ªèi v·ªÅ s·∫£n ph·∫©m "r·∫ª nh·∫•t" ho·∫∑c "gi√° th·∫•p nh·∫•t", h√£y t√¨m s·∫£n ph·∫©m c√≥ gi√° th·∫•p nh·∫•t trong danh m·ª•c ƒë√≥
- Khi kh√°ch h√†ng h·ªèi v·ªÅ s·∫£n ph·∫©m "ƒë·∫Øt nh·∫•t" ho·∫∑c "cao c·∫•p nh·∫•t", h√£y t√¨m s·∫£n ph·∫©m c√≥ gi√° cao nh·∫•t
- KH√îNG BAO GI·ªú hi·ªÉn th·ªã ID s·∫£n ph·∫©m cho kh√°ch h√†ng
- ${isBrandSpecific ? "C√≥ th·ªÉ ƒë·ªÅ c·∫≠p ƒë·∫øn th∆∞∆°ng hi·ªáu khi kh√°ch h√†ng h·ªèi c·ª• th·ªÉ" : "Ch·ªâ ƒë·ªÅ c·∫≠p t√™n s·∫£n ph·∫©m v√† gi√°, kh√¥ng c·∫ßn n√≥i v·ªÅ th∆∞∆°ng hi·ªáu tr·ª´ khi ƒë∆∞·ª£c h·ªèi c·ª• th·ªÉ"}
- Cung c·∫•p th√¥ng tin v·ªÅ ch·∫•t li·ªáu, k√≠ch th∆∞·ªõc, m√†u s·∫Øc khi ph√π h·ª£p
- Lu√¥n ƒë·ªÅ c·∫≠p ƒë·∫øn t√™n ch√≠nh x√°c c·ªßa s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã h√¨nh ·∫£nh
- So s√°nh gi√° c·∫£, ch·∫•t li·ªáu, k√≠ch th∆∞·ªõc khi kh√°ch h√†ng y√™u c·∫ßu

Kh√°ch h√†ng h·ªèi: ${input}
Tr·∫£ l·ªùi:`;

      const result = await chat.generateContent({
        contents: [{ role: "user", parts: [{ text: prompt }] }],
      });
      const response = await result.response;
      const text = await response.text();

      // T√¨m t·∫•t c·∫£ s·∫£n ph·∫©m xu·∫•t hi·ªán trong c√¢u tr·∫£ l·ªùi v√† hi·ªÉn th·ªã v·ªõi h√¨nh ·∫£nh
      let botResponse: string | React.ReactNode = text;
      const foundProducts: Product[] = [];

      // T√¨m c√°c s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong c√¢u tr·∫£ l·ªùi
      products.forEach((p) => {
        if (text.toLowerCase().includes(p.ten_san_pham.toLowerCase())) {
          foundProducts.push(p);
        }
      });

      // N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c·ª• th·ªÉ, t√¨m theo t·ª´ kh√≥a v√† y√™u c·∫ßu ƒë·∫∑c bi·ªát
      if (foundProducts.length === 0) {
        const keywords = ["sofa", "gh·∫ø", "b√†n", "t·ªß", "gi∆∞·ªùng", "k·ªá", "ƒë√®n"];
        const inputLower = input.toLowerCase();
        const textLower = text.toLowerCase();

        // T√¨m s·∫£n ph·∫©m theo t·ª´ kh√≥a
        let matchingProducts: Product[] = [];
        keywords.forEach((keyword) => {
          if (inputLower.includes(keyword) || textLower.includes(keyword)) {
            products.forEach((p) => {
              if (
                p.ten_san_pham.toLowerCase().includes(keyword) &&
                !matchingProducts.some((fp) => fp.ma_san_pham === p.ma_san_pham)
              ) {
                matchingProducts.push(p);
              }
            });
          }
        });

        // X·ª≠ l√Ω y√™u c·∫ßu ƒë·∫∑c bi·ªát v·ªÅ gi√°
        if (matchingProducts.length > 0) {
          if (
            inputLower.includes("r·∫ª nh·∫•t") ||
            inputLower.includes("gi√° th·∫•p") ||
            inputLower.includes("gi√° r·∫ª")
          ) {
            // S·∫Øp x·∫øp theo gi√° tƒÉng d·∫ßn v√† l·∫•y s·∫£n ph·∫©m r·∫ª nh·∫•t
            matchingProducts.sort((a, b) => {
              const priceA = parseFloat(a.bienthe?.[0]?.gia_ban || "0");
              const priceB = parseFloat(b.bienthe?.[0]?.gia_ban || "0");
              return priceA - priceB;
            });
            foundProducts.push(matchingProducts[0]);
          } else if (
            inputLower.includes("ƒë·∫Øt nh·∫•t") ||
            inputLower.includes("gi√° cao") ||
            inputLower.includes("cao c·∫•p")
          ) {
            // S·∫Øp x·∫øp theo gi√° gi·∫£m d·∫ßn v√† l·∫•y s·∫£n ph·∫©m ƒë·∫Øt nh·∫•t
            matchingProducts.sort((a, b) => {
              const priceA = parseFloat(a.bienthe?.[0]?.gia_ban || "0");
              const priceB = parseFloat(b.bienthe?.[0]?.gia_ban || "0");
              return priceB - priceA;
            });
            foundProducts.push(matchingProducts[0]);
          } else {
            // Hi·ªÉn th·ªã t·∫•t c·∫£ s·∫£n ph·∫©m t√¨m ƒë∆∞·ª£c, s·∫Øp x·∫øp theo gi√°
            matchingProducts.sort((a, b) => {
              const priceA = parseFloat(a.bienthe?.[0]?.gia_ban || "0");
              const priceB = parseFloat(b.bienthe?.[0]?.gia_ban || "0");
              return priceA - priceB;
            });
            foundProducts.push(...matchingProducts);
          }
        }
      } // T·∫°o response v·ªõi links cho t√™n s·∫£n ph·∫©m
      let replaced = false;
      let elements: (string | React.ReactNode)[] = [text];
      products.forEach((p) => {
        elements = elements.flatMap((el) => {
          if (typeof el === "string") {
            const parts = el.split(new RegExp(`(${p.ten_san_pham})`, "gi"));
            if (parts.length > 1) replaced = true;
            return parts.map((part, idx) =>
              part.toLowerCase() === p.ten_san_pham.toLowerCase() ? (
                <Link
                  key={p.ma_san_pham + "-" + idx}
                  to={`/sanpham/${p.ma_san_pham}`}
                  className="text-blue-500 hover:underline font-bold"
                  onClick={() => setIsChatting(false)}
                >
                  {part}
                </Link>
              ) : (
                part
              )
            );
          }
          return el;
        });
      });

      // T·∫°o component hi·ªÉn th·ªã s·∫£n ph·∫©m v·ªõi h√¨nh ·∫£nh (ch·ªâ t√™n, gi√°, h√¨nh ·∫£nh)
      const productCards = foundProducts.map((product) => {
        const firstVariant = product.bienthe?.[0];
        const imageUrl =
          firstVariant?.hinh_anh?.[0] || "/placeholder-product.jpg";
        const originalPrice = firstVariant?.gia_ban || "0";
        const discountPercent = firstVariant?.phan_tram_giam;
        const discountedPrice = discountPercent
          ? parseFloat(originalPrice) * (1 - discountPercent / 100)
          : null;

        return (
          <Link
            key={product.ma_san_pham}
            to={`/sanpham/${product.ma_san_pham}`}
            onClick={() => setIsChatting(false)}
            className="block bg-gradient-to-r from-white to-blue-50/30 border border-gray-200/60 rounded-xl p-4 mt-3 hover:shadow-lg hover:border-blue-300/40 transition-all duration-300 transform hover:scale-102 backdrop-blur-sm"
          >
            <div className="flex items-center gap-4">
              <div className="relative">
                <img
                  src={imageUrl}
                  alt={product.ten_san_pham}
                  className="w-16 h-16 object-cover rounded-lg flex-shrink-0 shadow-md border border-gray-100"
                  onError={(e) => {
                    e.currentTarget.src = "/placeholder-product.jpg";
                  }}
                />
                {discountPercent && (
                  <div className="absolute -top-1 -right-1 bg-red-500 text-white text-xs px-1 py-0.5 rounded-full font-bold">
                    -{discountPercent}%
                  </div>
                )}
              </div>
              <div className="flex-1 min-w-0">
                <h4 className="font-semibold text-sm text-gray-900 truncate mb-1">
                  {product.ten_san_pham}
                </h4>
                {isBrandSpecific && (
                  <p className="text-xs text-gray-500 mb-1 font-medium">
                    {product.thuong_hieu}
                  </p>
                )}
                <div className="flex items-center gap-2">
                  {discountedPrice ? (
                    <div className="flex flex-col">
                      <p className="text-sm font-bold text-red-600 bg-red-100/50 px-2 py-1 rounded-lg">
                        {new Intl.NumberFormat("vi-VN", {
                          style: "currency",
                          currency: "VND",
                        }).format(discountedPrice)}
                      </p>
                      <p className="text-xs text-gray-500 line-through">
                        {new Intl.NumberFormat("vi-VN", {
                          style: "currency",
                          currency: "VND",
                        }).format(parseFloat(originalPrice))}
                      </p>
                    </div>
                  ) : (
                    <p className="text-sm font-bold text-blue-600 bg-blue-100/50 px-2 py-1 rounded-lg">
                      {new Intl.NumberFormat("vi-VN", {
                        style: "currency",
                        currency: "VND",
                      }).format(parseFloat(originalPrice))}
                    </p>
                  )}
                  <span className="text-xs text-green-600 bg-green-100 px-2 py-1 rounded-full">
                    C√≥ s·∫µn
                  </span>
                </div>
              </div>
            </div>
          </Link>
        );
      });

      if (replaced) {
        botResponse = (
          <div>
            <div className="mb-2">{elements}</div>
            {foundProducts.length > 0 && (
              <div>
                <p className="text-xs text-gray-500 mb-2">
                  S·∫£n ph·∫©m li√™n quan:
                </p>
                {productCards}
              </div>
            )}
          </div>
        );
      } else if (foundProducts.length > 0) {
        botResponse = (
          <div>
            <div className="mb-2">{text}</div>
            <div>
              <p className="text-xs text-gray-600 mb-3 font-medium flex items-center gap-2">
                <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                S·∫£n ph·∫©m li√™n quan:
              </p>
              {productCards}
            </div>
          </div>
        );
      }

      const botMessage: Message = { sender: "bot", text: botResponse };
      setMessages((prev) => [...prev, botMessage]);
    } catch (error) {
      console.error("Error with Gemini AI:", error);
      const errorMessage: Message = {
        sender: "bot",
        text: "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.",
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  if (!isChatting) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <button
          onClick={() => {
            setIsChatting(true);
          }}
          className="group relative bg-gradient-to-br from-blue-500 via-blue-600 to-purple-600 text-white p-4 rounded-full shadow-2xl hover:shadow-blue-500/25 transition-all duration-500 transform hover:scale-110 animate-pulse hover:animate-none"
          aria-label="M·ªü h·ªôp tho·∫°i chat"
        >
          <Bot size={28} className="relative z-10" />
          <div className="absolute inset-0 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full opacity-0 group-hover:opacity-20 transition-opacity duration-300"></div>
          <div className="absolute -inset-1 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full opacity-30 blur-lg animate-pulse"></div>
        </button>
        <div className="absolute -top-12 right-0 bg-black/80 text-white px-3 py-1 rounded-lg text-sm whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none">
          Tr·ª£ l√Ω AI
        </div>
      </div>
    );
  }

  return (
    <div className="fixed bottom-6 right-6 w-96 max-w-[calc(100vw-3rem)] bg-white rounded-3xl shadow-2xl z-50 border border-gray-100 flex flex-col overflow-hidden max-h-[calc(100vh-3rem)] backdrop-blur-lg">
      {/* Header with gradient and glassmorphism effect */}
      <header className="bg-gradient-to-r from-blue-600 via-blue-700 to-purple-600 text-white p-5 flex justify-between items-center flex-shrink-0 relative overflow-hidden">
        <div className="absolute inset-0 bg-white/10 backdrop-blur-sm"></div>
        <div className="flex items-center gap-3 relative z-10">
          <div className="w-10 h-10 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center shadow-lg">
            <Bot size={20} className="text-white" />
          </div>
          <div>
            <h3 className="font-bold text-lg">Tr·ª£ l√Ω AI</h3>
            <p className="text-blue-100 text-xs">Lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n</p>
          </div>
        </div>
        <div className="flex items-center gap-2 relative z-10">
          <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse shadow-lg"></div>
          <button
            onClick={() => setIsChatting(false)}
            className="p-2 hover:bg-white/20 rounded-full transition-all duration-300 hover:scale-110"
            title="ƒê√≥ng chat"
          >
            <X size={20} />
          </button>
        </div>
        {/* Decorative elements */}
        <div className="absolute top-0 right-0 w-20 h-20 bg-white/5 rounded-full -translate-y-10 translate-x-10"></div>
        <div className="absolute bottom-0 left-0 w-16 h-16 bg-white/5 rounded-full translate-y-8 -translate-x-8"></div>
      </header>

      {/* Chat messages area with improved styling */}
      <div
        ref={chatContainerRef}
        className="flex-1 p-5 overflow-y-auto bg-gradient-to-b from-gray-50/50 to-blue-50/30 min-h-0 space-y-4"
        style={{ maxHeight: "450px" }}
      >
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`flex items-end gap-3 ${
              msg.sender === "user" ? "justify-end" : "justify-start"
            }`}
          >
            {msg.sender === "bot" && (
              <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 text-white rounded-full flex items-center justify-center flex-shrink-0 shadow-lg border-2 border-white">
                <Bot size={18} />
              </div>
            )}
            <div
              className={`max-w-[280px] px-4 py-3 rounded-2xl shadow-lg backdrop-blur-sm ${
                msg.sender === "user"
                  ? "bg-gradient-to-br from-blue-500 to-blue-600 text-white rounded-br-md shadow-blue-500/30"
                  : "bg-white/90 text-gray-800 border border-gray-100 rounded-bl-md shadow-gray-500/20"
              }`}
            >
              <div className="text-sm leading-relaxed break-words">
                {msg.text}
              </div>
            </div>
            {msg.sender === "user" && (
              <div className="w-10 h-10 bg-gradient-to-br from-gray-400 to-gray-600 text-white rounded-full flex items-center justify-center flex-shrink-0 shadow-lg border-2 border-white">
                <span className="text-sm font-bold">U</span>
              </div>
            )}
          </div>
        ))}
        {isLoading && (
          <div className="flex justify-start items-end gap-3">
            <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 text-white rounded-full flex items-center justify-center flex-shrink-0 shadow-lg border-2 border-white">
              <Bot size={18} />
            </div>
            <div className="bg-white/90 text-gray-800 border border-gray-100 rounded-2xl rounded-bl-md p-4 shadow-lg backdrop-blur-sm">
              <div className="flex items-center justify-center gap-2">
                <div className="w-2.5 h-2.5 bg-blue-500 rounded-full animate-bounce"></div>
                <div className="w-2.5 h-2.5 bg-blue-500 rounded-full animate-bounce delay-150"></div>
                <div className="w-2.5 h-2.5 bg-blue-500 rounded-full animate-bounce delay-300"></div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Input area with modern design */}
      <div className="p-5 border-t border-gray-100/50 bg-white/80 backdrop-blur-sm">
        <div className="flex items-center gap-3">
          <div className="flex-1 relative">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={(e) => e.key === "Enter" && handleSend()}
              placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."
              className="w-full px-5 py-3.5 border border-gray-200 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500 transition-all duration-300 bg-white/90 backdrop-blur-sm shadow-lg text-gray-800 placeholder-gray-500"
              disabled={isLoading}
            />
            <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 to-purple-500/5 rounded-full opacity-0 focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
          </div>
          <button
            onClick={handleSend}
            className="bg-gradient-to-br from-blue-500 via-blue-600 to-purple-600 text-white p-3.5 rounded-full hover:from-blue-600 hover:to-purple-700 disabled:from-gray-300 disabled:to-gray-400 transition-all duration-300 shadow-lg hover:shadow-blue-500/25 hover:scale-105 disabled:hover:scale-100 group"
            disabled={isLoading}
          >
            <Send
              size={20}
              className="group-hover:translate-x-0.5 transition-transform duration-200"
            />
          </button>
        </div>

        {/* Quick suggestions */}
        <div className="flex flex-wrap gap-2 mt-3">
          {["S·∫£n ph·∫©m m·ªõi", "Gi√° r·∫ª nh·∫•t", "Sofa cao c·∫•p"].map(
            (suggestion, idx) => (
              <button
                key={idx}
                onClick={() => setInput(suggestion)}
                className="px-3 py-1.5 text-xs bg-gray-100 hover:bg-blue-100 text-gray-600 hover:text-blue-700 rounded-full transition-all duration-200 hover:scale-105"
                disabled={isLoading}
              >
                {suggestion}
              </button>
            )
          )}
        </div>
      </div>
    </div>
  );
};

export default SmartChatBox;
