import React, { useEffect, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { getOrderDetail } from "../API/orderApi";
import type { DonHang, ChiTietDonHang } from "../API/orderApi";

interface GHNShippingInfo {
  order_code: string;
  total_fee: number;
  expected_delivery_time: string;
  sort_code: string;
  orderId: string | number;
}

const TrangHoaDon: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [order, setOrder] = useState<DonHang | null>(
    location.state?.order || null
  );

  // Debug initial state
  console.log("üîç TrangHoaDon initialized with:", {
    "location.state": location.state,
    "initial order": location.state?.order,
    "order properties": location.state?.order
      ? Object.keys(location.state.order)
      : "no order",
  });

  const [orderDetails, setOrderDetails] = useState<ChiTietDonHang[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [ghnShippingInfo, setGhnShippingInfo] =
    useState<GHNShippingInfo | null>(null);

  // Parse query parameters
  const queryParams = new URLSearchParams(location.search);
  const app_trans_id = queryParams.get("app_trans_id"); // ZaloPay specific parameter
  const orderId = queryParams.get("orderId"); // General order ID for VNPay, COD, etc.
  const paymentMethod = queryParams.get("paymentMethod");
  const status = queryParams.get("status");

  // Helper functions
  const formatCurrency = (amount: string | number): string => {
    let numAmount: number;

    if (typeof amount === "string") {
      // X√≥a t·∫•t c·∫£ k√Ω t·ª± kh√¥ng ph·∫£i s·ªë v√† d·∫•u th·∫≠p ph√¢n
      const cleanString = amount.replace(/[^0-9.-]/g, "");
      numAmount = parseFloat(cleanString);
    } else {
      numAmount = amount;
    }

    // Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i s·ªë h·ª£p l·ªá
    if (isNaN(numAmount)) {
      console.warn("formatCurrency: Invalid amount:", amount);
      return "0 ‚Ç´";
    }

    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(numAmount);
  };

  const formatDate = (dateString: string): string => {
    const date = new Date(dateString);
    return date.toLocaleString("vi-VN", {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const getPaymentMethodDisplay = (method: string): string => {
    switch (method?.toLowerCase()) {
      case "vnpay":
        return "VNPay";
      case "zalopay":
        return "ZaloPay";
      case "momo":
        return "MoMo";
      case "cod":
        return "COD (Thanh to√°n khi nh·∫≠n h√†ng)";
      default:
        return method || "Ch∆∞a x√°c ƒë·ªãnh";
    }
  };

  const getStatusDisplay = (
    status: string
  ): { text: string; color: string } => {
    switch (status?.toLowerCase()) {
      case "pending":
        return { text: "Ch·ªù x·ª≠ l√Ω", color: "text-yellow-600 bg-yellow-100" };
      case "confirmed":
        return { text: "ƒê√£ x√°c nh·∫≠n", color: "text-blue-600 bg-blue-100" };
      case "shipping":
        return {
          text: "ƒêang giao h√†ng",
          color: "text-orange-600 bg-orange-100",
        };
      case "delivered":
        return { text: "ƒê√£ giao h√†ng", color: "text-green-600 bg-green-100" };
      case "cancelled":
        return { text: "ƒê√£ h·ªßy", color: "text-red-600 bg-red-100" };
      default:
        return { text: "ƒê√£ ƒë·∫∑t h√†ng", color: "text-green-600 bg-green-100" };
    }
  };

  useEffect(() => {
    console.log("üîç TrangHoaDon - Query params:", {
      app_trans_id,
      orderId,
      paymentMethod,
      status,
    });

    // Load GHN shipping info t·ª´ localStorage
    try {
      const storedGHNInfo = localStorage.getItem("ghnShippingInfo");
      if (storedGHNInfo) {
        const parsedInfo = JSON.parse(storedGHNInfo) as GHNShippingInfo;
        setGhnShippingInfo(parsedInfo);
        console.log("üì¶ Th√¥ng tin v·∫≠n chuy·ªÉn GHN:", parsedInfo);
      }
    } catch (err) {
      console.error("L·ªói parse GHN shipping info:", err);
    }

    // Lu√¥n g·ªçi API ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß, b·∫•t k·ªÉ c√≥ order t·ª´ state hay kh√¥ng
    // Ch·ªâ b·ªè qua n·∫øu ƒë√£ c√≥ ƒë·∫ßy ƒë·ªß c·∫£ order v√† orderDetails
    const hasCompleteData =
      order &&
      orderDetails &&
      orderDetails.length > 0 &&
      order.ten_nguoi_nhan &&
      order.dia_chi_giao &&
      order.tong_tien &&
      order.tong_thanh_toan;

    if (hasCompleteData) {
      console.log("‚úÖ ƒê√£ c√≥ d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß, b·ªè qua API call:", {
        order,
        orderDetails,
      });
      return;
    }

    // X√°c ƒë·ªãnh ID ƒë∆°n h√†ng t·ª´ c√°c ngu·ªìn kh√°c nhau
    let targetOrderId;

    if (paymentMethod?.toLowerCase() === "momo" && orderId) {
      // V·ªõi ZaloPay, l·∫•y ph·∫ßn sau d·∫•u _ t·ª´ orderId (format: 250805_199)
      const parts = orderId.split("_");
      targetOrderId = parts.length > 1 ? parts[1] : orderId;
      console.log(
        "üéØ ZaloPay - Extracted Order ID:",
        targetOrderId,
        "from original:",
        orderId
      );
    } else {
      // V·ªõi c√°c ph∆∞∆°ng th·ª©c kh√°c, s·ª≠ d·ª•ng logic c≈©
      targetOrderId = orderId || app_trans_id || order?.ma_don_hang?.toString();
    }

    console.log(
      "üéØ Final Target Order ID:",
      targetOrderId,
      "t·ª´ orderId:",
      orderId,
      "ho·∫∑c app_trans_id:",
      app_trans_id,
      "ho·∫∑c order.ma_don_hang:",
      order?.ma_don_hang,
      "paymentMethod:",
      paymentMethod
    );

    if (targetOrderId) {
      setLoading(true);
      setError(null);

      console.log(
        `üöÄ Attempting to fetch order detail for ID: ${targetOrderId}`
      );
      console.log(
        `üì° API URL: http://127.0.0.1:8000/api/donhang/chitietdonhang/${targetOrderId}`
      );

      // G·ªçi API ƒë·ªÉ l·∫•y chi ti·∫øt ƒë∆°n h√†ng
      getOrderDetail(targetOrderId)
        .then((response) => {
          console.log("‚úÖ Order detail from API:", response);
          console.log(
            "‚úÖ Response structure:",
            JSON.stringify(response, null, 2)
          );

          if (response && response.don_hang) {
            // LU√îN c·∫≠p nh·∫≠t order t·ª´ API ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß
            console.log(
              "‚úÖ C·∫≠p nh·∫≠t order state v·ªõi d·ªØ li·ªáu API:",
              response.don_hang
            );
            console.log(
              "‚úÖ Order properties t·ª´ API:",
              Object.keys(response.don_hang)
            );
            setOrder(response.don_hang);

            // Lu√¥n set orderDetails t·ª´ API v√¨ c√≥ th·ªÉ thi·∫øu t·ª´ state
            console.log("‚úÖ ƒê·∫∑t orderDetails v·ªõi:", response.chi_tiet || []);
            setOrderDetails(response.chi_tiet || []);
          } else {
            console.error("‚ùå Response kh√¥ng c√≥ don_hang:", response);
            setError("Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng");
          }
        })
        .catch((err) => {
          console.error("API error:", err);

          // Hi·ªÉn th·ªã th√¥ng tin l·ªói chi ti·∫øt h∆°n
          if (err.response) {
            const status = err.response.status;
            const message = err.response.data?.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh";
            console.error(`API Error ${status}:`, message);

            if (status === 404) {
              setError(`Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: ${targetOrderId}`);
            } else if (status === 500) {
              setError("L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau");
            } else {
              setError(`L·ªói ${status}: ${message}`);
            }
          } else if (err.request) {
            setError(
              "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng."
            );
          } else {
            setError("C√≥ l·ªói x·∫£y ra khi t·∫£i th√¥ng tin ƒë∆°n h√†ng");
          }

          // Fallback: th·ª≠ t√¨m trong localStorage
          try {
            const storedOrder = localStorage.getItem("orderData");
            if (storedOrder) {
              const parsedOrder = JSON.parse(storedOrder);
              if (
                parsedOrder.ma_don_hang === parseInt(targetOrderId) ||
                parsedOrder.id === parseInt(targetOrderId) ||
                parsedOrder.ma_don_hang === targetOrderId ||
                parsedOrder.id === targetOrderId
              ) {
                console.log(
                  "‚úÖ T√¨m th·∫•y order trong localStorage:",
                  parsedOrder
                );
                if (!order) {
                  setOrder(parsedOrder);
                }
                // N·∫øu c√≥ chi ti·∫øt s·∫£n ph·∫©m trong localStorage
                if (parsedOrder.chi_tiet && parsedOrder.chi_tiet.length > 0) {
                  setOrderDetails(parsedOrder.chi_tiet);
                }
                setError(null); // Clear error n·∫øu t√¨m th·∫•y trong localStorage
                return;
              }
            }
          } catch (parseErr) {
            console.error("Error parsing stored order:", parseErr);
          }
        })
        .finally(() => {
          setLoading(false);
        });
    } else if (status && status !== "1") {
      console.log("‚ùå Giao d·ªãch kh√¥ng th√†nh c√¥ng - status:", status);
      setError("Giao d·ªãch kh√¥ng th√†nh c√¥ng");
      setLoading(false);
    } else {
      console.log("‚ÑπÔ∏è Kh√¥ng c√≥ targetOrderId v√† status valid:", {
        targetOrderId,
        status,
      });
    }
  }, [order, app_trans_id, orderId, paymentMethod, status]);
  if (loading) {
    return (
      <div className="container mx-auto p-4">
        <div className="bg-white p-8 rounded-lg text-center">
          <h2 className="text-xl font-semibold text-gray-700 mb-4">
            ƒêang t·∫£i th√¥ng tin h√≥a ƒë∆°n...
          </h2>
        </div>
      </div>
    );
  }

  if (error || (!order && !loading && !orderId)) {
    return (
      <div className="container mx-auto p-4">
        <div className="bg-white p-8 rounded-lg text-center">
          <h2 className="text-xl font-semibold text-red-600 mb-4">
            {error || "Kh√¥ng t√¨m th·∫•y th√¥ng tin h√≥a ƒë∆°n"}
          </h2>
          {orderId && (
            <p className="text-sm text-gray-600 mb-4">M√£ ƒë∆°n h√†ng: {orderId}</p>
          )}
          <div className="space-x-4">
            <button
              className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
              onClick={() => window.location.reload()}
            >
              Th·ª≠ l·∫°i
            </button>
            <button
              className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"
              onClick={() => navigate("/")}
            >
              Quay v·ªÅ trang ch·ªß
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (!order && !error) {
    console.log("‚è≥ Ch∆∞a c√≥ order v√† kh√¥ng c√≥ l·ªói, hi·ªÉn th·ªã loading...");
    return (
      <div className="container mx-auto p-4">
        <div className="bg-white p-8 rounded-lg text-center">
          <h2 className="text-xl font-semibold text-gray-700 mb-4">
            ƒêang t·∫£i th√¥ng tin h√≥a ƒë∆°n...
          </h2>
        </div>
      </div>
    );
  }

  if (!order) {
    console.log("‚ùå Kh√¥ng c√≥ order ƒë·ªÉ render, tr·∫°ng th√°i hi·ªán t·∫°i:", {
      order,
      orderDetails,
      loading,
      error,
    });
    return null;
  }

  console.log("‚úÖ S·∫µn s√†ng render v·ªõi d·ªØ li·ªáu:", { order, orderDetails });
  console.log("üîç Order details:", {
    ten_nguoi_nhan: order.ten_nguoi_nhan,
    dia_chi_giao: order.dia_chi_giao,
    tong_tien: order.tong_tien,
    phi_van_chuyen: order.phi_van_chuyen,
    tong_thanh_toan: order.tong_thanh_toan,
  });

  return (
    <div className="container mx-auto p-4 max-w-4xl pt-20">
      <div className="bg-white rounded-lg shadow-xl p-8">
        {/* Header */}
        <div className="text-center mb-8 border-b pb-6">
          <h1 className="text-3xl font-bold mb-2 text-green-600">
            {paymentMethod
              ? "üí≥ Thanh to√°n th√†nh c√¥ng!"
              : order.hinh_thuc_thanh_toan === "COD"
                ? "üì¶ ƒê·∫∑t h√†ng th√†nh c√¥ng!"
                : "‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!"}
          </h1>
          <p className="text-gray-600">
            C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng. D∆∞·ªõi ƒë√¢y l√† th√¥ng tin chi ti·∫øt h√≥a ƒë∆°n:
          </p>
        </div>

        {/* Order Information */}
        <div className="grid md:grid-cols-2 gap-6 mb-8">
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-800 border-l-4 border-blue-500 pl-3">
              üìã Th√¥ng tin ƒë∆°n h√†ng
            </h3>
            <div className="space-y-3 bg-gray-50 p-4 rounded-lg">
              <div className="flex justify-between">
                <span className="font-medium text-gray-600">M√£ ƒë∆°n h√†ng:</span>
                <span className="font-bold text-blue-600">
                  #{order.ma_don_hang}
                </span>
              </div>
              {order.Ngay_Tao && (
                <div className="flex justify-between">
                  <span className="font-medium text-gray-600">Ng√†y ƒë·∫∑t:</span>
                  <span className="text-gray-800">
                    {formatDate(order.Ngay_Tao)}
                  </span>
                </div>
              )}
              <div className="flex justify-between">
                <span className="font-medium text-gray-600">
                  Ph∆∞∆°ng th·ª©c thanh to√°n:
                </span>
                <span className="text-gray-800">
                  {getPaymentMethodDisplay(
                    paymentMethod || order.hinh_thuc_thanh_toan
                  )}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="font-medium text-gray-600">Tr·∫°ng th√°i:</span>
                <span
                  className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusDisplay(order.trang_thai || (paymentMethod ? "confirmed" : "pending")).color}`}
                >
                  {
                    getStatusDisplay(
                      order.trang_thai ||
                        (paymentMethod ? "confirmed" : "pending")
                    ).text
                  }
                </span>
              </div>
              <div className="flex justify-between">
                <span className="font-medium text-gray-600">
                  Tr·∫°ng th√°i thanh to√°n:
                </span>
                <span
                  className={`px-3 py-1 rounded-full text-sm font-medium ${
                    order.da_thanh_toan === 1
                      ? "text-green-700 bg-green-100"
                      : "text-yellow-700 bg-yellow-100"
                  }`}
                >
                  {order.da_thanh_toan === 1
                    ? "ƒê√£ thanh to√°n"
                    : "Ch∆∞a thanh to√°n"}
                </span>
              </div>
              {order.ngay_thanh_toan && (
                <div className="flex justify-between">
                  <span className="font-medium text-gray-600">
                    Ng√†y thanh to√°n:
                  </span>
                  <span className="text-gray-800">
                    {formatDate(order.ngay_thanh_toan)}
                  </span>
                </div>
              )}
            </div>
          </div>

          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-800 border-l-4 border-green-500 pl-3">
              üöö Th√¥ng tin giao h√†ng
            </h3>
            <div className="space-y-3 bg-gray-50 p-4 rounded-lg">
              <div className="flex justify-between">
                <span className="font-medium text-gray-600">Ng∆∞·ªùi nh·∫≠n:</span>
                <span className="text-gray-800">
                  {order.ten_nguoi_nhan || "Kh√¥ng c√≥ th√¥ng tin"}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="font-medium text-gray-600">
                  S·ªë ƒëi·ªán tho·∫°i:
                </span>
                <span className="text-gray-800">
                  {order.so_dien_thoai || "Kh√¥ng c√≥ th√¥ng tin"}
                </span>
              </div>
              <div className="flex flex-col">
                <span className="font-medium text-gray-600 mb-2">
                  ƒê·ªãa ch·ªâ giao h√†ng:
                </span>
                <span className="text-gray-800 bg-white p-2 rounded border">
                  {order.dia_chi_giao || "Kh√¥ng c√≥ th√¥ng tin"}
                </span>
              </div>
              {order.ghi_chu && (
                <div className="flex flex-col">
                  <span className="font-medium text-gray-600 mb-2">
                    Ghi ch√∫:
                  </span>
                  <span className="text-gray-800 bg-white p-2 rounded border italic">
                    {order.ghi_chu}
                  </span>
                </div>
              )}

              {/* Th√¥ng tin v·∫≠n chuy·ªÉn GHN */}
              {ghnShippingInfo && (
                <>
                  <div className="border-t pt-3 mt-3">
                    <h4 className="font-medium text-gray-700 mb-2 flex items-center">
                      üì¶ Th√¥ng tin v·∫≠n chuy·ªÉn GHN
                    </h4>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-medium text-gray-600">
                      M√£ v·∫≠n ƒë∆°n:
                    </span>
                    <span className="text-blue-600 font-mono text-sm font-bold">
                      {ghnShippingInfo.order_code}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-medium text-gray-600">
                      M√£ s·∫Øp x·∫øp:
                    </span>
                    <span className="text-gray-800 font-mono text-sm">
                      {ghnShippingInfo.sort_code}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="font-medium text-gray-600">
                      Ph√≠ v·∫≠n chuy·ªÉn GHN:
                    </span>
                    <span className="text-green-600 font-medium">
                      {formatCurrency(ghnShippingInfo.total_fee)}
                    </span>
                  </div>
                  <div className="flex flex-col">
                    <span className="font-medium text-gray-600 mb-1">
                      Th·ªùi gian d·ª± ki·∫øn giao:
                    </span>
                    <span className="text-orange-600 font-medium bg-orange-50 p-2 rounded border">
                      {new Date(
                        ghnShippingInfo.expected_delivery_time
                      ).toLocaleString("vi-VN", {
                        year: "numeric",
                        month: "2-digit",
                        day: "2-digit",
                        hour: "2-digit",
                        minute: "2-digit",
                      })}
                    </span>
                  </div>
                  <div className="mt-2 p-2 bg-blue-50 border border-blue-200 rounded-lg">
                    <p className="text-xs text-blue-700 flex items-center">
                      <span className="mr-2">‚ÑπÔ∏è</span>
                      <span>
                        ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω v·ªõi GHN. B·∫°n c√≥ th·ªÉ theo d√µi
                        ti·∫øn tr√¨nh giao h√†ng qua m√£ v·∫≠n ƒë∆°n.
                      </span>
                    </p>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>

        {/* Products */}
        <div className="mb-8">
          <h3 className="text-lg font-semibold text-gray-800 border-l-4 border-purple-500 pl-3 mb-4">
            üõçÔ∏è Chi ti·∫øt s·∫£n ph·∫©m
          </h3>
          <div className="bg-gray-50 rounded-lg overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-200">
                  <tr>
                    <th className="px-4 py-3 text-left font-medium text-gray-700">
                      S·∫£n ph·∫©m
                    </th>
                    <th className="px-4 py-3 text-center font-medium text-gray-700">
                      S·ªë l∆∞·ª£ng
                    </th>
                    <th className="px-4 py-3 text-right font-medium text-gray-700">
                      ƒê∆°n gi√°
                    </th>
                    <th className="px-4 py-3 text-right font-medium text-gray-700">
                      Th√†nh ti·ªÅn
                    </th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {orderDetails?.map((sp, idx) => (
                    <tr key={idx} className="bg-white hover:bg-gray-50">
                      <td className="px-4 py-4">
                        <div>
                          <div className="font-medium text-gray-900">
                            {sp.ten_san_pham}
                          </div>
                          {(sp.mau_sac || sp.kich_thuoc) && (
                            <div className="text-sm text-gray-500 mt-1">
                              {sp.mau_sac && (
                                <span className="inline-block bg-gray-100 px-2 py-1 rounded mr-2">
                                  M√†u: {sp.mau_sac}
                                </span>
                              )}
                              {sp.kich_thuoc && (
                                <span className="inline-block bg-gray-100 px-2 py-1 rounded">
                                  Size: {sp.kich_thuoc}
                                </span>
                              )}
                            </div>
                          )}
                        </div>
                      </td>
                      <td className="px-4 py-4 text-center">
                        <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full font-medium">
                          {sp.so_luong}
                        </span>
                      </td>
                      <td className="px-4 py-4 text-right text-gray-900">
                        {formatCurrency(sp.gia_goc)}
                      </td>
                      <td className="px-4 py-4 text-right font-medium text-gray-900">
                        {formatCurrency(sp.gia_sau_km * sp.so_luong)}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>

        {/* Payment Summary */}
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-6 mb-8">
          <h3 className="text-lg font-semibold text-gray-800 mb-4 border-l-4 border-orange-500 pl-3">
            üí∞ T·ªïng k·∫øt thanh to√°n
          </h3>
          <div className="space-y-3">
            <div className="flex justify-between text-gray-700">
              <span>T·∫°m t√≠nh:</span>
              <span className="font-medium">
                {formatCurrency(order.tong_tien || 0)}
              </span>
            </div>
            <div className="flex justify-between text-gray-700">
              <span>Ph√≠ v·∫≠n chuy·ªÉn:</span>
              <span className="font-medium">
                {formatCurrency(order.phi_van_chuyen || 0)}
              </span>
            </div>
            <div className="border-t border-gray-300 pt-3">
              <div className="flex justify-between text-xl font-bold text-gray-900">
                <span>T·ªïng thanh to√°n:</span>
                <span className="text-green-600">
                  {formatCurrency(order.tong_thanh_toan || 0)}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Actions */}
        <div className="text-center space-y-4">
          <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
            <p className="text-green-800 font-medium">
              ‚úÖ ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n th√†nh c√¥ng!
            </p>
            <p className="text-green-700 text-sm mt-1">
              Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n ƒë·ªÉ x√°c nh·∫≠n v√† giao h√†ng trong th·ªùi
              gian s·ªõm nh·∫•t.
            </p>
          </div>

          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button
              className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-200 flex items-center justify-center"
              onClick={() => {
                localStorage.removeItem("orderData");
                localStorage.removeItem("pendingOrder");
                navigate("/");
              }}
            >
              <span className="mr-2">üè†</span>
              Quay v·ªÅ trang ch·ªß
            </button>

            <button
              className="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-200 flex items-center justify-center"
              onClick={() => navigate("/sanpham")}
            >
              <span className="mr-2">üõçÔ∏è</span>
              Ti·∫øp t·ª•c mua s·∫Øm
            </button>

            <button
              className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-200 flex items-center justify-center"
              onClick={() => window.print()}
            >
              <span className="mr-2">üñ®Ô∏è</span>
              In h√≥a ƒë∆°n
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TrangHoaDon;
