import { useState, useEffect } from "react";
import {
  Package,
  Search,
  Eye,
  CreditCard,
  User,
  Phone,
  MapPin,
  Clock,
  DollarSign,
  CheckCircle,
  XCircle,
  Truck,
  AlertCircle,
  Users,
  ArrowLeft,
  ShoppingBag,
  FileCheck,
} from "lucide-react";
import orderApi, {
  type DonHang,
  type OrderDetailResponse,
  updateOrderStatusQL,
  updateOrderStatusNEW,
  getCancelReturnRequests,
  confirmCancelReturn,
  refundVNPay,
  refundZaloPay,
} from "../API/orderApi";
import accountApi from "../API/accountApi";
import type { Account } from "../types/Account";
import {
  parseAddress,
  type GHNCreateOrderPayload,
} from "../API/ghnShippingApi";
import apiClient from "../ultis/apiClient";

const ITEMS_PER_PAGE = 10;

// H√†m √°nh x·∫° tr·∫°ng th√°i v·ªõi m√†u s·∫Øc v√† icon
const getStatusInfo = (status: string) => {
  switch (status) {
    case "Ch·ªù x·ª≠ l√Ω":
    case "cho_xu_ly":
    case "Ch·ªù X√°c Nh·∫≠n":
      return {
        color: "bg-yellow-100 text-yellow-800",
        icon: <Clock className="w-4 h-4" />,
        text: "Ch·ªù x·ª≠ l√Ω",
      };
    case "ƒêang giao":
    case "dang_giao":
    case "ƒêang Giao":
      return {
        color: "bg-blue-100 text-blue-800",
        icon: <Truck className="w-4 h-4" />,
        text: "ƒêang giao",
      };
    case "Ho√†n th√†nh":
    case "hoan_thanh":
    case "Ho√†n Th√†nh":
      return {
        color: "bg-green-100 text-green-800",
        icon: <CheckCircle className="w-4 h-4" />,
        text: "Ho√†n th√†nh",
      };
    case "H·ªßy":
    case "da_huy":
    case "H·ªßy":
      return {
        color: "bg-red-100 text-red-800",
        icon: <XCircle className="w-4 h-4" />,
        text: "H·ªßy",
      };
    default:
      return {
        color: "bg-gray-100 text-gray-800",
        icon: <AlertCircle className="w-4 h-4" />,
        text: status,
      };
  }
};

// Component modal chi ti·∫øt ƒë∆°n h√†ng
const OrderDetailModal = ({
  orderId,
  onClose,
}: {
  orderId: number;
  onClose: () => void;
}) => {
  const [orderDetail, setOrderDetail] = useState<OrderDetailResponse | null>(
    null
  );
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchOrderDetail = async () => {
      try {
        setIsLoading(true);
        const response = await orderApi.getOrderDetail(orderId);
        setOrderDetail(response);
      } catch (error) {
        console.error("L·ªói khi t·∫£i chi ti·∫øt ƒë∆°n h√†ng:", error);
      } finally {
        setIsLoading(false);
      }
    };

    if (orderId) {
      fetchOrderDetail();
    }
  }, [orderId]);

  const formatDate = (dateString: string | null) => {
    if (!dateString) return "Ch∆∞a c√≥ th√¥ng tin";
    return new Date(dateString).toLocaleString("vi-VN", {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const formatCurrency = (amount: number | string) => {
    const numAmount = typeof amount === "string" ? Number(amount) : amount;
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(numAmount);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-gray-900">
              Chi ti·∫øt ƒë∆°n h√†ng
            </h2>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600 p-2 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <XCircle size={24} />
            </button>
          </div>

          {isLoading ? (
            <div className="text-center py-8">
              <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              <p className="mt-2 text-gray-600">
                ƒêang t·∫£i chi ti·∫øt ƒë∆°n h√†ng...
              </p>
            </div>
          ) : orderDetail ? (
            <div className="space-y-6">
              {/* Th√¥ng tin ƒë∆°n h√†ng */}
              <div className="bg-gray-50 rounded-xl p-4">
                <h3 className="font-semibold text-lg mb-3">
                  Th√¥ng tin ƒë∆°n h√†ng
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-500">M√£ ƒë∆°n h√†ng</p>
                    <p className="font-medium">
                      #{orderDetail.don_hang.ma_don_hang}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">M√£ ng∆∞·ªùi d√πng</p>
                    <p className="font-medium">
                      #{orderDetail.don_hang.ma_nguoi_dung}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">T√™n ng∆∞·ªùi nh·∫≠n</p>
                    <p className="font-medium">
                      {orderDetail.don_hang.ten_nguoi_nhan}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">S·ªë ƒëi·ªán tho·∫°i</p>
                    <p className="font-medium">
                      {orderDetail.don_hang.so_dien_thoai}
                    </p>
                  </div>
                  <div className="md:col-span-2">
                    <p className="text-sm text-gray-500">ƒê·ªãa ch·ªâ giao h√†ng</p>
                    <p className="font-medium">
                      {orderDetail.don_hang.dia_chi_giao}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">ƒê∆°n v·ªã v·∫≠n chuy·ªÉn</p>
                    <p className="font-medium">
                      {orderDetail.don_hang.don_vi_van_chuyen || "Ch∆∞a c√≥"}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">M√£ v·∫≠n ƒë∆°n</p>
                    <p className="font-medium">
                      {orderDetail.don_hang.ma_van_don || "Ch∆∞a c√≥"}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Ng√†y d·ª± ki·∫øn giao</p>
                    <p className="font-medium">
                      {formatDate(
                        orderDetail.don_hang.ngay_du_kien_giao || null
                      )}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">
                      Ph∆∞∆°ng th·ª©c thanh to√°n
                    </p>
                    <div className="flex items-center space-x-2">
                      <p className="font-medium">
                        {orderDetail.don_hang.hinh_thuc_thanh_toan}
                      </p>
                      {/* Badge hi·ªÉn th·ªã lo·∫°i thanh to√°n */}
                      {(orderDetail.don_hang.hinh_thuc_thanh_toan === "VNPay" ||
                        orderDetail.don_hang.hinh_thuc_thanh_toan ===
                          "vnpay") && (
                        <span className="px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded-full">
                          üí≥ Online
                        </span>
                      )}
                      {(orderDetail.don_hang.hinh_thuc_thanh_toan ===
                        "ZaloPay" ||
                        orderDetail.don_hang.hinh_thuc_thanh_toan ===
                          "zalopay") && (
                        <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                          üì± E-Wallet
                        </span>
                      )}
                      {(orderDetail.don_hang.hinh_thuc_thanh_toan === "COD" ||
                        orderDetail.don_hang.hinh_thuc_thanh_toan ===
                          "cod") && (
                        <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                          üíµ Ti·ªÅn m·∫∑t
                        </span>
                      )}
                    </div>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">
                      T√¨nh tr·∫°ng thanh to√°n
                    </p>
                    <div className="flex items-center space-x-2">
                      {orderDetail.don_hang.da_thanh_toan ? (
                        <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                          ‚úÖ ƒê√£ thanh to√°n
                        </span>
                      ) : (
                        <span className="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full">
                          ‚ùå Ch∆∞a thanh to√°n
                        </span>
                      )}
                    </div>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Ng√†y thanh to√°n</p>
                    <p className="font-medium">
                      {formatDate(orderDetail.don_hang.ngay_thanh_toan)}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">M√£ voucher</p>
                    <p className="font-medium">
                      {(orderDetail.don_hang as any).ma_voucher
                        ? `#${(orderDetail.don_hang as any).ma_voucher}`
                        : "Kh√¥ng s·ª≠ d·ª•ng"}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Tr·∫°ng th√°i ƒë∆°n h√†ng</p>
                    <div className="flex items-center space-x-2">
                      {getStatusInfo(orderDetail.don_hang.trang_thai).icon}
                      <span
                        className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusInfo(orderDetail.don_hang.trang_thai).color}`}
                      >
                        {getStatusInfo(orderDetail.don_hang.trang_thai).text}
                      </span>
                    </div>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Y√™u c·∫ßu H·ªßy/tr·∫£</p>
                    <p className="font-medium">
                      {(orderDetail.don_hang as any).yeu_cau_huy_tra ===
                        "none" || !(orderDetail.don_hang as any).yeu_cau_huy_tra
                        ? "Kh√¥ng c√≥"
                        : (orderDetail.don_hang as any).yeu_cau_huy_tra}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Ng√†y t·∫°o</p>
                    <p className="font-medium">
                      {formatDate(orderDetail.don_hang.Ngay_Tao)}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Ng√†y c·∫≠p nh·∫≠t</p>
                    <p className="font-medium">
                      {formatDate(orderDetail.don_hang.Ngay_Cap_Nhat)}
                    </p>
                  </div>
                  {orderDetail.don_hang.ghi_chu && (
                    <div className="md:col-span-2">
                      <p className="text-sm text-gray-500">Ghi ch√∫</p>
                      <p className="font-medium">
                        {orderDetail.don_hang.ghi_chu}
                      </p>
                    </div>
                  )}
                  {(orderDetail.don_hang as any).ly_do_huy_tra && (
                    <div className="md:col-span-2">
                      <p className="text-sm text-gray-500">L√Ω do H·ªßy/tr·∫£</p>
                      <p className="font-medium">
                        {(orderDetail.don_hang as any).ly_do_huy_tra}
                      </p>
                    </div>
                  )}
                </div>
              </div>

              {/* Chi ti·∫øt s·∫£n ph·∫©m */}
              <div className="bg-white border rounded-xl p-4">
                <h3 className="font-semibold text-lg mb-3">
                  Chi ti·∫øt s·∫£n ph·∫©m
                </h3>
                <div className="space-y-3">
                  {orderDetail.chi_tiet.map((item, index) => (
                    <div
                      key={index}
                      className="flex justify-between items-center p-3 bg-gray-50 rounded-lg"
                    >
                      <div className="flex-1">
                        <p className="font-medium">{item.ten_san_pham}</p>
                        <p className="text-sm text-gray-500">
                          M√†u: {item.mau_sac} | Size: {item.kich_thuoc}
                        </p>
                      </div>
                      <div className="text-right">
                        <p className="font-medium">
                          {item.so_luong} x {formatCurrency(item.gia_sau_km)}
                        </p>
                        <p className="text-sm text-gray-500">
                          T·ªïng:{" "}
                          {formatCurrency(item.gia_sau_km * item.so_luong)}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* T·ªïng k·∫øt */}
              <div className="bg-blue-50 rounded-xl p-4">
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span>T·ªïng ti·ªÅn h√†ng:</span>
                    <span className="font-medium">
                      {formatCurrency(Number(orderDetail.don_hang.tong_tien))}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span>Ph√≠ v·∫≠n chuy·ªÉn:</span>
                    <span className="font-medium">
                      {formatCurrency(
                        Number(orderDetail.don_hang.phi_van_chuyen)
                      )}
                    </span>
                  </div>
                  <div className="border-t pt-2 flex justify-between text-lg font-bold">
                    <span>T·ªïng thanh to√°n:</span>
                    <span className="text-blue-600">
                      {formatCurrency(
                        Number(orderDetail.don_hang.tong_thanh_toan)
                      )}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="text-center py-8">
              <p className="text-gray-500">Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ƒë∆°n h√†ng</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Component ch√≠nh
const QLDonHang = () => {
  const [accounts, setAccounts] = useState<Account[]>([]);
  const [orders, setOrders] = useState<DonHang[]>([]);
  const [pendingOrders, setPendingOrders] = useState<DonHang[]>([]);
  const [confirmedOrders, setConfirmedOrders] = useState<DonHang[]>([]);
  const [cancelReturnRequests, setCancelReturnRequests] = useState<DonHang[]>(
    []
  );
  const [isLoading, setIsLoading] = useState(false);
  const [isLoadingOrders, setIsLoadingOrders] = useState(false);
  const [isLoadingPendingOrders, setIsLoadingPendingOrders] = useState(false);
  const [isLoadingConfirmedOrders, setIsLoadingConfirmedOrders] =
    useState(false);
  const [isLoadingCancelReturnRequests, setIsLoadingCancelReturnRequests] =
    useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedOrderId, setSelectedOrderId] = useState<number | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedUser, setSelectedUser] = useState<Account | null>(null);
  const [view, setView] = useState<
    | "users"
    | "orders"
    | "pending-orders"
    | "confirmed-orders"
    | "cancel-return-requests"
  >("users"); // Tr·∫°ng th√°i ƒë·ªÉ ƒëi·ªÅu khi·ªÉn view hi·ªán t·∫°i

  // Load danh s√°ch ng∆∞·ªùi d√πng khi component mount
  useEffect(() => {
    loadAccounts();
  }, []);

  const loadAccounts = async () => {
    try {
      setIsLoading(true);
      console.log("üîç ƒêang t·∫£i danh s√°ch ng∆∞·ªùi d√πng...");
      const response = await accountApi.fetchAccounts();

      console.log("üìã Response t·ª´ API fetchAccounts:", response);

      // Ki·ªÉm tra c·∫•u tr√∫c response
      if (Array.isArray(response)) {
        // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ tr·ª±c ti·∫øp array (backward compatibility)
        setAccounts(response);
        console.log(`‚úÖ ƒê√£ t·∫£i ${response.length} ng∆∞·ªùi d√πng`);
      } else if (response && response.data && Array.isArray(response.data)) {
        // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ {message, data: [...]}
        setAccounts(response.data);
        console.log(`‚úÖ ƒê√£ t·∫£i ${response.data.length} ng∆∞·ªùi d√πng`);
      } else {
        console.warn("‚ö†Ô∏è API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng:", response);
        setAccounts([]);
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng:", error);
      setAccounts([]); // ƒê·∫£m b·∫£o lu√¥n set v·ªÅ m·∫£ng r·ªóng khi c√≥ l·ªói
      alert("L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng!");
    } finally {
      setIsLoading(false);
    }
  };

  // Load ƒë∆°n h√†ng theo user ID
  const loadOrdersByUserId = async (userId: number, user: Account) => {
    try {
      setIsLoadingOrders(true);
      setSelectedUser(user);
      setView("orders");
      console.log(`üîç ƒêang t·∫£i ƒë∆°n h√†ng c·ªßa user ID: ${userId}...`);
      const response = await orderApi.getOrdersByUserId(userId);

      console.log("üìã Response t·ª´ API getOrdersByUserId:", response);

      // Ki·ªÉm tra v√† set orders v·ªõi nhi·ªÅu format kh√°c nhau
      if (response && Array.isArray(response.don_hang)) {
        // Format: {don_hang: [...], message: "..."}
        setOrders(response.don_hang);
        console.log(`‚úÖ ƒê√£ t·∫£i ${response.don_hang.length} ƒë∆°n h√†ng`);
      } else if (response && Array.isArray(response.data)) {
        // Format: {data: [...], message: "..."}
        setOrders(response.data);
        console.log(`‚úÖ ƒê√£ t·∫£i ${response.data.length} ƒë∆°n h√†ng`);
      } else if (Array.isArray(response)) {
        // Format: tr·ª±c ti·∫øp array
        setOrders(response);
        console.log(`‚úÖ ƒê√£ t·∫£i ${response.length} ƒë∆°n h√†ng`);
      } else {
        console.warn("‚ö†Ô∏è API tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá:", response);
        setOrders([]);
      }
      setCurrentPage(1);
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i ƒë∆°n h√†ng:", error);
      setOrders([]); // ƒê·∫£m b·∫£o lu√¥n set v·ªÅ m·∫£ng r·ªóng khi c√≥ l·ªói
      alert("L·ªói khi t·∫£i danh s√°ch ƒë∆°n h√†ng!");
    } finally {
      setIsLoadingOrders(false);
    }
  };

  // Load ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n
  const loadPendingOrders = async () => {
    try {
      setIsLoadingPendingOrders(true);
      setView("pending-orders");
      console.log("üîç ƒêang t·∫£i ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n...");
      const response = await orderApi.getPendingOrders();

      console.log("üìã Response t·ª´ API getPendingOrders:", response);

      // Ki·ªÉm tra v√† set pending orders v·ªõi nhi·ªÅu format kh√°c nhau
      if (response && Array.isArray(response.don_hang)) {
        // Format: {don_hang: [...], message: "..."}
        setPendingOrders(response.don_hang);
        console.log(
          `‚úÖ ƒê√£ t·∫£i ${response.don_hang.length} ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n`
        );
      } else if (response && Array.isArray(response.data)) {
        // Format: {data: [...], message: "..."}
        setPendingOrders(response.data);
        console.log(`‚úÖ ƒê√£ t·∫£i ${response.data.length} ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n`);
      } else if (Array.isArray(response)) {
        // Format: tr·ª±c ti·∫øp array
        setPendingOrders(response);
        console.log(`‚úÖ ƒê√£ t·∫£i ${response.length} ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n`);
      } else {
        console.warn(
          "‚ö†Ô∏è API tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá:",
          response
        );
        setPendingOrders([]);
      }
      setCurrentPage(1);
      setSearchQuery("");
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n:", error);
      setPendingOrders([]); // ƒê·∫£m b·∫£o lu√¥n set v·ªÅ m·∫£ng r·ªóng khi c√≥ l·ªói
      alert("L·ªói khi t·∫£i danh s√°ch ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n!");
    } finally {
      setIsLoadingPendingOrders(false);
    }
  };

  // Load y√™u c·∫ßu H·ªßy/tr·∫£ h√†ng
  const loadCancelReturnRequests = async () => {
    try {
      setIsLoadingCancelReturnRequests(true);
      setView("cancel-return-requests");
      console.log("üîç ƒêang t·∫£i y√™u c·∫ßu H·ªßy/tr·∫£ h√†ng...");
      const response = await getCancelReturnRequests();

      console.log("üìã Response t·ª´ API getCancelReturnRequests:", response);

      // Ki·ªÉm tra v√† set cancel return requests v·ªõi nhi·ªÅu format kh√°c nhau
      if (response && Array.isArray(response.don_hang)) {
        // Format: {don_hang: [...], message: "..."}
        setCancelReturnRequests(response.don_hang);
        console.log(
          `‚úÖ ƒê√£ t·∫£i ${response.don_hang.length} y√™u c·∫ßu H·ªßy/tr·∫£ h√†ng`
        );
      } else if (response && Array.isArray(response.data)) {
        // Format: {data: [...], message: "..."}
        setCancelReturnRequests(response.data);
        console.log(`‚úÖ ƒê√£ t·∫£i ${response.data.length} y√™u c·∫ßu H·ªßy/tr·∫£ h√†ng`);
      } else if (Array.isArray(response)) {
        // Format: tr·ª±c ti·∫øp array
        setCancelReturnRequests(response);
        console.log(`‚úÖ ƒê√£ t·∫£i ${response.length} y√™u c·∫ßu H·ªßy/tr·∫£ h√†ng`);
      } else {
        console.warn(
          "‚ö†Ô∏è API tr·∫£ v·ªÅ d·ªØ li·ªáu y√™u c·∫ßu H·ªßy/tr·∫£ h√†ng kh√¥ng h·ª£p l·ªá:",
          response
        );
        setCancelReturnRequests([]);
      }
      setCurrentPage(1);
      setSearchQuery("");
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i y√™u c·∫ßu H·ªßy/tr·∫£ h√†ng:", error);
      setCancelReturnRequests([]); // ƒê·∫£m b·∫£o lu√¥n set v·ªÅ m·∫£ng r·ªóng khi c√≥ l·ªói
      alert("L·ªói khi t·∫£i danh s√°ch y√™u c·∫ßu H·ªßy/tr·∫£ h√†ng!");
    } finally {
      setIsLoadingCancelReturnRequests(false);
    }
  };

  // Load ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n
  const loadConfirmedOrders = async () => {
    try {
      setIsLoadingConfirmedOrders(true);
      setView("confirmed-orders");
      console.log("üîç ƒêang t·∫£i ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n...");
      const response = await apiClient.get("/qldonhang/dsdaxacnhan");

      console.log("üìã Response t·ª´ API loadConfirmedOrders:", response.data);

      // Ki·ªÉm tra v√† set confirmed orders v·ªõi nhi·ªÅu format kh√°c nhau
      if (response.data && Array.isArray(response.data.don_hang)) {
        // Format: {don_hang: [...], message: "..."}
        setConfirmedOrders(response.data.don_hang);
        console.log(
          `‚úÖ ƒê√£ t·∫£i ${response.data.don_hang.length} ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n`
        );
      } else if (response.data && Array.isArray(response.data.data)) {
        // Format: {data: [...], message: "..."}
        setConfirmedOrders(response.data.data);
        console.log(
          `‚úÖ ƒê√£ t·∫£i ${response.data.data.length} ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n`
        );
      } else if (Array.isArray(response.data)) {
        // Format: tr·ª±c ti·∫øp array
        setConfirmedOrders(response.data);
        console.log(`‚úÖ ƒê√£ t·∫£i ${response.data.length} ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n`);
      } else {
        console.warn(
          "‚ö†Ô∏è API tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá:",
          response.data
        );
        setConfirmedOrders([]);
      }
      setCurrentPage(1);
      setSearchQuery("");
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n:", error);
      setConfirmedOrders([]); // ƒê·∫£m b·∫£o lu√¥n set v·ªÅ m·∫£ng r·ªóng khi c√≥ l·ªói
      alert("L·ªói khi t·∫£i danh s√°ch ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n!");
    } finally {
      setIsLoadingConfirmedOrders(false);
    }
  };

  // X·ª≠ l√Ω x√°c nh·∫≠n h·ªßy/tr·∫£ h√†ng
  const handleConfirmCancelReturn = async (
    orderId: number,
    decision: "Ch·∫•p Nh·∫≠n" | "T·ª´ Ch·ªëi",
    order: DonHang
  ) => {
    try {
      // Hi·ªÉn th·ªã x√°c nh·∫≠n tr∆∞·ªõc khi th·ª±c hi·ªán
      const isOnlinePayment =
        order.hinh_thuc_thanh_toan === "vnpay" ||
        order.hinh_thuc_thanh_toan === "zalopay";

      const isPaid = order.da_thanh_toan === 1;

      let confirmMessage = "";
      if (decision === "Ch·∫•p Nh·∫≠n") {
        confirmMessage = `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ch·∫•p nh·∫≠n y√™u c·∫ßu h·ªßy/tr·∫£ cho ƒë∆°n h√†ng #${orderId}?`;
        if (isOnlinePayment && isPaid) {
          confirmMessage += `\n\nüí∞ ƒê√¢y l√† ƒë∆°n h√†ng ƒë√£ thanh to√°n qua ${order.hinh_thuc_thanh_toan}, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông ho√†n ti·ªÅn.`;
        }
      } else {
        confirmMessage = `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·ª´ ch·ªëi y√™u c·∫ßu h·ªßy/tr·∫£ cho ƒë∆°n h√†ng #${orderId}?`;
      }

      if (!confirm(confirmMessage)) return;

      console.log(
        `üîÑ ƒêang x√°c nh·∫≠n ${decision.toLowerCase()} ƒë∆°n h√†ng ${orderId}...`
      );

      // G·ªçi API x√°c nh·∫≠n h·ªßy/tr·∫£
      await confirmCancelReturn(orderId, decision);

      // N·∫øu ch·∫•p nh·∫≠n v√† l√† thanh to√°n online ƒë√£ thanh to√°n, th·ª±c hi·ªán ho√†n ti·ªÅn
      if (decision === "Ch·∫•p Nh·∫≠n" && isPaid && isOnlinePayment) {
        try {
          console.log(
            `üí∞ ƒêang th·ª±c hi·ªán ho√†n ti·ªÅn ${order.hinh_thuc_thanh_toan} cho ƒë∆°n h√†ng ${orderId}...`
          );

          // G·ªçi API ho√†n ti·ªÅn t∆∞∆°ng ·ª©ng v·ªõi ph∆∞∆°ng th·ª©c thanh to√°n
          const paymentMethod = order.hinh_thuc_thanh_toan.toLowerCase();
          if (paymentMethod == "zalopay" || paymentMethod == "zalo pay") {
            console.log("üîÑ G·ªçi API ho√†n ti·ªÅn ZaloPay...");
            await refundZaloPay(orderId);
          } else if (paymentMethod == "vnpay" || paymentMethod == "vn pay") {
            console.log("üîÑ G·ªçi API ho√†n ti·ªÅn VNPay...");
            await refundVNPay(orderId);
          } else {
            // Fallback cho c√°c ph∆∞∆°ng th·ª©c thanh to√°n online kh√°c
            console.log("üîÑ G·ªçi API ho√†n ti·ªÅn fallback (VNPay)...");
            await refundVNPay(orderId);
          }

          alert(
            `‚úÖ ${decision} y√™u c·∫ßu h·ªßy/tr·∫£ th√†nh c√¥ng!\n\nüí∞ Ho√†n ti·ªÅn ${order.hinh_thuc_thanh_toan} ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán cho ƒë∆°n h√†ng #${orderId}\nS·ªë ti·ªÅn: ${new Intl.NumberFormat(
              "vi-VN",
              {
                style: "currency",
                currency: "VND",
              }
            ).format(Number(order.tong_thanh_toan))}`
          );
        } catch (refundError) {
          console.error("‚ùå L·ªói khi ho√†n ti·ªÅn:", refundError);
          alert(
            `‚ö†Ô∏è ${decision} y√™u c·∫ßu h·ªßy/tr·∫£ th√†nh c√¥ng nh∆∞ng ho√†n ti·ªÅn th·∫•t b·∫°i!\n\nƒê∆°n h√†ng #${orderId} ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n h·ªßy/tr·∫£ nh∆∞ng ho√†n ti·ªÅn ${order.hinh_thuc_thanh_toan} g·∫∑p l·ªói.\n\nVui l√≤ng li√™n h·ªá b·ªô ph·∫≠n k·ªπ thu·∫≠t ƒë·ªÉ x·ª≠ l√Ω ho√†n ti·ªÅn th·ªß c√¥ng.`
          );
        }
      } else {
        const message =
          decision === "Ch·∫•p Nh·∫≠n"
            ? `‚úÖ Ch·∫•p nh·∫≠n y√™u c·∫ßu h·ªßy/tr·∫£ th√†nh c√¥ng cho ƒë∆°n h√†ng #${orderId}!${
                !isPaid
                  ? "\n\nüìù ƒê∆°n h√†ng ch∆∞a thanh to√°n n√™n kh√¥ng c·∫ßn ho√†n ti·ªÅn."
                  : !isOnlinePayment
                    ? "\n\nüíµ ƒê∆°n h√†ng thanh to√°n COD n√™n kh√¥ng c·∫ßn ho√†n ti·ªÅn online."
                    : ""
              }`
            : `‚úÖ T·ª´ ch·ªëi y√™u c·∫ßu h·ªßy/tr·∫£ th√†nh c√¥ng cho ƒë∆°n h√†ng #${orderId}!`;
        alert(message);
      }

      // Reload danh s√°ch y√™u c·∫ßu h·ªßy/tr·∫£
      await loadCancelReturnRequests();
    } catch (error) {
      console.error(
        `‚ùå L·ªói khi ${decision.toLowerCase()} y√™u c·∫ßu h·ªßy/tr·∫£:`,
        error
      );
      alert(
        `‚ùå ${decision} y√™u c·∫ßu h·ªßy/tr·∫£ th·∫•t b·∫°i!\n\nL·ªói: ${error instanceof Error ? error.message : error}`
      );
    }
  };

  // X·ª≠ l√Ω x√°c nh·∫≠n ƒë∆°n h√†ng (ch·ªâ x√°c nh·∫≠n, kh√¥ng t·∫°o ƒë∆°n GHN)
  const handleConfirmOrder = async (orderId: number) => {
    try {
      if (!confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√°c nh·∫≠n ƒë∆°n h√†ng #${orderId}?`)) {
        return;
      }

      console.log(`üîÑ ƒêang x√°c nh·∫≠n ƒë∆°n h√†ng ${orderId}...`);

      // G·ªçi API x√°c nh·∫≠n ƒë∆°n h√†ng
      await updateOrderStatusNEW(orderId);

      console.log("‚úÖ X√°c nh·∫≠n ƒë∆°n h√†ng th√†nh c√¥ng");

      alert(`‚úÖ X√°c nh·∫≠n ƒë∆°n h√†ng #${orderId} th√†nh c√¥ng!`);

      // Reload danh s√°ch ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n
      await loadPendingOrders();
    } catch (error) {
      console.error("‚ùå L·ªói khi x√°c nh·∫≠n ƒë∆°n h√†ng:", error);

      let errorMessage = "X√°c nh·∫≠n ƒë∆°n h√†ng th·∫•t b·∫°i!";
      if (error instanceof Error) {
        errorMessage += `\n\nL·ªói: ${error.message}`;
      }

      alert(`‚ùå ${errorMessage}`);
    }
  };

  // X·ª≠ l√Ω t·∫°o ƒë∆°n GHN cho ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n
  const handleCreateGHNOrder = async (orderId: number, order: DonHang) => {
    try {
      if (
        !confirm(
          `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫°o ƒë∆°n v·∫≠n chuy·ªÉn GHN cho ƒë∆°n h√†ng #${orderId}?`
        )
      ) {
        return;
      }

      console.log(`üîÑ ƒêang t·∫°o ƒë∆°n GHN cho ƒë∆°n h√†ng ${orderId}...`);

      // Parse ƒë·ªãa ch·ªâ t·ª´ chu·ªói ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß
      const addressParts = parseAddress(order.dia_chi_giao);

      // T·∫°o payload cho GHN
      const ghnPayload: GHNCreateOrderPayload = {
        to_name: order.ten_nguoi_nhan,
        to_phone: order.so_dien_thoai,
        to_address: addressParts.address || order.dia_chi_giao,
        to_ward_name: addressParts.ward || "Ph∆∞·ªùng 14",
        to_district_name: addressParts.district || "Qu·∫≠n 10",
        to_province_name: addressParts.province || "TP. H·ªì Ch√≠ Minh",
        cod_amount:
          order.hinh_thuc_thanh_toan === "COD"
            ? Number(order.tong_thanh_toan)
            : 0,
        content: `ƒê∆°n h√†ng #${orderId} - Th·ªùi trang`,
        weight: 500, // Default weight
        length: 20,
        width: 15,
        height: 10,
        service_type_id: 2, // H√†ng nh·∫π
        payment_type_id: order.hinh_thuc_thanh_toan === "COD" ? 2 : 1, // 1: Ng∆∞·ªùi g·ª≠i tr·∫£, 2: Ng∆∞·ªùi nh·∫≠n tr·∫£
        required_note: "KHONGCHOXEMHANG",
        note: order.ghi_chu || "Giao nhanh trong gi·ªù h√†nh ch√≠nh",
        client_order_code: `DH${orderId}`,
        insurance_value: Number(order.tong_thanh_toan),
      };

      // G·ªçi API t·∫°o ƒë∆°n GHN
      const ghnResponse = await apiClient.post(
        `/ghn/taodon/${orderId}`,
        ghnPayload
      );

      console.log("‚úÖ T·∫°o ƒë∆°n GHN th√†nh c√¥ng:", ghnResponse.data);

      alert(
        `‚úÖ T·∫°o ƒë∆°n v·∫≠n chuy·ªÉn GHN cho ƒë∆°n h√†ng #${orderId} th√†nh c√¥ng!\n\n` +
          `üì¶ M√£ v·∫≠n ƒë∆°n: ${ghnResponse.data.order_code || "ƒêang c·∫≠p nh·∫≠t"}\n` +
          `üí∞ Ph√≠ v·∫≠n chuy·ªÉn: ${new Intl.NumberFormat("vi-VN", {
            style: "currency",
            currency: "VND",
          }).format(ghnResponse.data.total_fee || 0)}\n` +
          `üïê D·ª± ki·∫øn giao: ${ghnResponse.data.expected_delivery_time || "ƒêang c·∫≠p nh·∫≠t"}`
      );

      // Reload danh s√°ch ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n
      await loadConfirmedOrders();
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫°o ƒë∆°n GHN:", error);

      let errorMessage = "T·∫°o ƒë∆°n v·∫≠n chuy·ªÉn GHN th·∫•t b·∫°i!";
      if (error instanceof Error) {
        errorMessage += `\n\nL·ªói: ${error.message}`;
      }

      alert(`‚ùå ${errorMessage}`);
    }
  };

  // Quay l·∫°i danh s√°ch ng∆∞·ªùi d√πng
  const backToUsers = () => {
    setView("users");
    setSelectedUser(null);
    setOrders([]);
    setPendingOrders([]);
    setConfirmedOrders([]);
    setCancelReturnRequests([]);
    setSearchQuery("");
    setCurrentPage(1);
  };

  // Duy·ªát ƒë∆°n h√†ng - ch·ªâ x√°c nh·∫≠n ƒë∆°n h√†ng
  const handleApproveOrder = async (orderId: number) => {
    try {
      console.log("üîÑ ƒêang x√°c nh·∫≠n ƒë∆°n h√†ng:", orderId);

      // S·ª≠ d·ª•ng h√†m m·ªõi ƒë·ªÉ ch·ªâ x√°c nh·∫≠n ƒë∆°n h√†ng
      await handleConfirmOrder(orderId);
    } catch (error: any) {
      console.error("‚ùå L·ªói duy·ªát ƒë∆°n h√†ng:", error);
      alert("L·ªói khi duy·ªát ƒë∆°n h√†ng!");
    }
  };

  // T·ª´ ch·ªëi ƒë∆°n h√†ng - chuy·ªÉn sang "H·ªßy"
  const handleRejectOrder = async (orderId: number) => {
    if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·ª´ ch·ªëi ƒë∆°n h√†ng n√†y?")) {
      try {
        await updateOrderStatusQL(orderId, "H·ªßy");
        alert("ƒê√£ t·ª´ ch·ªëi ƒë∆°n h√†ng th√†nh c√¥ng!");
        // Reload pending orders ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch
        loadPendingOrders();
      } catch (error) {
        console.error("L·ªói t·ª´ ch·ªëi ƒë∆°n h√†ng:", error);
        alert("L·ªói khi t·ª´ ch·ªëi ƒë∆°n h√†ng!");
      }
    }
  };

  // Filter accounts theo search query (lo·∫°i b·ªè admin v√† ch·ªâ l·∫•y kh√°ch h√†ng)
  const filteredAccounts = (accounts || []).filter((account) => {
    // Lo·∫°i b·ªè admin, ch·ªâ hi·ªÉn th·ªã kh√°ch h√†ng
    if (account.vai_tro === "admin") return false;

    // N·∫øu kh√¥ng c√≥ search query, hi·ªÉn th·ªã t·∫•t c·∫£ kh√°ch h√†ng
    if (!searchQuery) return true;

    // Filter theo search query
    const searchLower = searchQuery.toLowerCase();
    return (
      account.ho_ten.toLowerCase().includes(searchLower) ||
      account.email.toLowerCase().includes(searchLower) ||
      account.so_dien_thoai?.includes(searchLower) ||
      account.ma_nguoi_dung.toString().includes(searchLower)
    );
  });

  // Filter orders theo search query
  const filteredOrders = (orders || []).filter((order) => {
    if (!searchQuery) return true;
    const searchLower = searchQuery.toLowerCase();
    return (
      order.ma_don_hang.toString().includes(searchLower) ||
      order.ten_nguoi_nhan.toLowerCase().includes(searchLower) ||
      order.so_dien_thoai.includes(searchLower) ||
      order.dia_chi_giao.toLowerCase().includes(searchLower) ||
      order.trang_thai.toLowerCase().includes(searchLower) ||
      order.hinh_thuc_thanh_toan.toLowerCase().includes(searchLower)
    );
  });

  // Filter pending orders theo search query
  const filteredPendingOrders = (pendingOrders || []).filter((order) => {
    if (!searchQuery) return true;
    const searchLower = searchQuery.toLowerCase();
    return (
      order.ma_don_hang.toString().includes(searchLower) ||
      order.ten_nguoi_nhan.toLowerCase().includes(searchLower) ||
      order.so_dien_thoai.includes(searchLower) ||
      order.dia_chi_giao.toLowerCase().includes(searchLower) ||
      order.trang_thai.toLowerCase().includes(searchLower) ||
      order.hinh_thuc_thanh_toan.toLowerCase().includes(searchLower)
    );
  });

  // Filter cancel return requests theo search query
  const filteredCancelReturnRequests = (cancelReturnRequests || []).filter(
    (order) => {
      if (!searchQuery) return true;
      const searchLower = searchQuery.toLowerCase();
      return (
        order.ma_don_hang.toString().includes(searchLower) ||
        order.ten_nguoi_nhan.toLowerCase().includes(searchLower) ||
        order.so_dien_thoai.includes(searchLower) ||
        order.dia_chi_giao.toLowerCase().includes(searchLower) ||
        order.trang_thai.toLowerCase().includes(searchLower) ||
        order.hinh_thuc_thanh_toan.toLowerCase().includes(searchLower)
      );
    }
  );

  // Filter confirmed orders theo search query
  const filteredConfirmedOrders = (confirmedOrders || []).filter((order) => {
    if (!searchQuery) return true;
    const searchLower = searchQuery.toLowerCase();
    return (
      order.ma_don_hang.toString().includes(searchLower) ||
      order.ten_nguoi_nhan.toLowerCase().includes(searchLower) ||
      order.so_dien_thoai.includes(searchLower) ||
      order.dia_chi_giao.toLowerCase().includes(searchLower) ||
      order.trang_thai.toLowerCase().includes(searchLower) ||
      order.hinh_thuc_thanh_toan.toLowerCase().includes(searchLower)
    );
  });

  // Pagination cho accounts
  const totalPagesAccounts = Math.ceil(
    filteredAccounts.length / ITEMS_PER_PAGE
  );
  const paginatedAccounts = filteredAccounts.slice(
    (currentPage - 1) * ITEMS_PER_PAGE,
    currentPage * ITEMS_PER_PAGE
  );

  // Pagination cho orders
  const totalPagesOrders = Math.ceil(filteredOrders.length / ITEMS_PER_PAGE);
  const paginatedOrders = filteredOrders.slice(
    (currentPage - 1) * ITEMS_PER_PAGE,
    currentPage * ITEMS_PER_PAGE
  );

  // Pagination cho pending orders
  const totalPagesPendingOrders = Math.ceil(
    filteredPendingOrders.length / ITEMS_PER_PAGE
  );
  const paginatedPendingOrders = filteredPendingOrders.slice(
    (currentPage - 1) * ITEMS_PER_PAGE,
    currentPage * ITEMS_PER_PAGE
  );

  // Pagination cho cancel return requests
  const totalPagesCancelReturnRequests = Math.ceil(
    filteredCancelReturnRequests.length / ITEMS_PER_PAGE
  );
  const paginatedCancelReturnRequests = filteredCancelReturnRequests.slice(
    (currentPage - 1) * ITEMS_PER_PAGE,
    currentPage * ITEMS_PER_PAGE
  );

  // Pagination cho confirmed orders
  const totalPagesConfirmedOrders = Math.ceil(
    filteredConfirmedOrders.length / ITEMS_PER_PAGE
  );
  const paginatedConfirmedOrders = filteredConfirmedOrders.slice(
    (currentPage - 1) * ITEMS_PER_PAGE,
    currentPage * ITEMS_PER_PAGE
  );

  // T√≠nh t·ªïng doanh thu cho user hi·ªán t·∫°i ho·∫∑c pending orders
  const totalRevenue =
    view === "orders"
      ? filteredOrders.reduce(
          (total, order) => total + Number(order.tong_thanh_toan),
          0
        )
      : view === "pending-orders"
        ? filteredPendingOrders.reduce(
            (total, order) => total + Number(order.tong_thanh_toan),
            0
          )
        : view === "confirmed-orders"
          ? filteredConfirmedOrders.reduce(
              (total, order) => total + Number(order.tong_thanh_toan),
              0
            )
          : view === "cancel-return-requests"
            ? filteredCancelReturnRequests.reduce(
                (total, order) => total + Number(order.tong_thanh_toan),
                0
              )
            : 0;

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="bg-blue-100 p-3 rounded-xl">
                <Package className="w-8 h-8 text-blue-600" />
              </div>
              <div>
                <h1 className="text-3xl font-bold text-gray-900">
                  Qu·∫£n l√Ω ƒë∆°n h√†ng
                </h1>
                <p className="text-gray-600">
                  {view === "users"
                    ? "Ch·ªçn ng∆∞·ªùi d√πng ƒë·ªÉ xem ƒë∆°n h√†ng c·ªßa h·ªç ho·∫∑c xem ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n"
                    : view === "orders"
                      ? `ƒê∆°n h√†ng c·ªßa ${selectedUser?.ho_ten}`
                      : view === "pending-orders"
                        ? "ƒê∆°n h√†ng ch·ªù x√°c nh·∫≠n"
                        : view === "confirmed-orders"
                          ? "ƒê∆°n h√†ng ƒë√£ x√°c nh·∫≠n"
                          : "Y√™u c·∫ßu H·ªßy/tr·∫£ h√†ng"}
                </p>
              </div>
            </div>

            <div className="flex items-center space-x-3">
              {view === "users" && (
                <>
                  <button
                    onClick={loadPendingOrders}
                    className="flex items-center space-x-2 px-4 py-2 bg-orange-600 text-white rounded-xl hover:bg-orange-700 transition-colors"
                  >
                    <FileCheck className="w-5 h-5" />
                    <span>ƒê∆°n h√†ng ch·ªù x√°c nh·∫≠n</span>
                  </button>
                  <button
                    onClick={loadConfirmedOrders}
                    className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition-colors"
                  >
                    <CheckCircle className="w-5 h-5" />
                    <span>ƒê∆°n h√†ng ƒë√£ x√°c nh·∫≠n</span>
                  </button>
                  <button
                    onClick={loadCancelReturnRequests}
                    className="flex items-center space-x-2 px-4 py-2 bg-red-600 text-white rounded-xl hover:bg-red-700 transition-colors"
                  >
                    <AlertCircle className="w-5 h-5" />
                    <span>Y√™u c·∫ßu H·ªßy/tr·∫£</span>
                  </button>
                </>
              )}

              {(view === "orders" ||
                view === "pending-orders" ||
                view === "confirmed-orders" ||
                view === "cancel-return-requests") && (
                <button
                  onClick={backToUsers}
                  className="flex items-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-xl hover:bg-gray-700 transition-colors"
                >
                  <ArrowLeft className="w-5 h-5" />
                  <span>Quay l·∫°i</span>
                </button>
              )}
            </div>
          </div>
        </div>

        {/* Search */}
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
          <div className="relative">
            <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              placeholder={
                view === "users"
                  ? "T√¨m ki·∫øm ng∆∞·ªùi d√πng (t√™n, email, SƒêT, ID)..."
                  : view === "pending-orders"
                    ? "T√¨m ki·∫øm ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n (m√£ ƒë∆°n h√†ng, t√™n, SƒêT, ƒë·ªãa ch·ªâ, tr·∫°ng th√°i...)..."
                    : view === "cancel-return-requests"
                      ? "T√¨m ki·∫øm y√™u c·∫ßu H·ªßy/tr·∫£ (m√£ ƒë∆°n h√†ng, t√™n, SƒêT, ƒë·ªãa ch·ªâ, tr·∫°ng th√°i...)..."
                      : "T√¨m ki·∫øm ƒë∆°n h√†ng (m√£ ƒë∆°n h√†ng, t√™n, SƒêT, ƒë·ªãa ch·ªâ, tr·∫°ng th√°i...)..."
              }
              value={searchQuery}
              onChange={(e) => {
                setSearchQuery(e.target.value);
                setCurrentPage(1);
              }}
              className="w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>

        {/* Statistics cho Orders v√† Pending Orders */}
        {((view === "orders" && orders.length > 0) ||
          (view === "pending-orders" && pendingOrders.length > 0) ||
          (view === "confirmed-orders" && confirmedOrders.length > 0) ||
          (view === "cancel-return-requests" &&
            cancelReturnRequests.length > 0)) && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">
                    {view === "pending-orders"
                      ? "T·ªïng ƒë∆°n ch·ªù x√°c nh·∫≠n"
                      : view === "confirmed-orders"
                        ? "T·ªïng ƒë∆°n ƒë√£ x√°c nh·∫≠n"
                        : view === "cancel-return-requests"
                          ? "T·ªïng y√™u c·∫ßu H·ªßy/tr·∫£"
                          : "T·ªïng ƒë∆°n h√†ng"}
                  </p>
                  <p className="text-2xl font-bold text-gray-900">
                    {view === "pending-orders"
                      ? pendingOrders.length
                      : view === "confirmed-orders"
                        ? confirmedOrders.length
                        : view === "cancel-return-requests"
                          ? cancelReturnRequests.length
                          : orders.length}
                  </p>
                </div>
                <div className="bg-blue-100 p-3 rounded-xl">
                  {view === "pending-orders" ? (
                    <FileCheck className="w-6 h-6 text-blue-600" />
                  ) : view === "confirmed-orders" ? (
                    <CheckCircle className="w-6 h-6 text-blue-600" />
                  ) : view === "cancel-return-requests" ? (
                    <AlertCircle className="w-6 h-6 text-blue-600" />
                  ) : (
                    <ShoppingBag className="w-6 h-6 text-blue-600" />
                  )}
                </div>
              </div>
            </div>

            <div className="bg-white rounded-2xl shadow-lg p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">
                    K·∫øt qu·∫£ l·ªçc
                  </p>
                  <p className="text-2xl font-bold text-gray-900">
                    {view === "pending-orders"
                      ? filteredPendingOrders.length
                      : view === "cancel-return-requests"
                        ? filteredCancelReturnRequests.length
                        : filteredOrders.length}
                  </p>
                </div>
                <div className="bg-green-100 p-3 rounded-xl">
                  <Search className="w-6 h-6 text-green-600" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-2xl shadow-lg p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">
                    T·ªïng doanh thu
                  </p>
                  <p className="text-2xl font-bold text-green-600">
                    {new Intl.NumberFormat("vi-VN", {
                      style: "currency",
                      currency: "VND",
                    }).format(totalRevenue)}
                  </p>
                </div>
                <div className="bg-yellow-100 p-3 rounded-xl">
                  <DollarSign className="w-6 h-6 text-yellow-600" />
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Users Table */}
        {view === "users" && (
          <div className="bg-white rounded-2xl shadow-lg overflow-hidden">
            {isLoading ? (
              <div className="text-center py-12">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                <p className="mt-2 text-gray-600">
                  ƒêang t·∫£i danh s√°ch ng∆∞·ªùi d√πng...
                </p>
              </div>
            ) : (
              <>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-gray-50 border-b border-gray-200">
                      <tr>
                        <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Ng∆∞·ªùi d√πng
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Li√™n h·ªá
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Vai tr√≤
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Tr·∫°ng th√°i
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Thao t√°c
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {paginatedAccounts.map((account) => (
                        <tr
                          key={account.ma_nguoi_dung}
                          className="hover:bg-gray-50 transition-colors"
                        >
                          <td className="px-6 py-4">
                            <div className="flex items-center">
                              <div className="bg-blue-100 p-2 rounded-full mr-3">
                                <User className="w-5 h-5 text-blue-600" />
                              </div>
                              <div>
                                <p className="font-medium text-gray-900">
                                  {account.ho_ten}
                                </p>
                                <p className="text-sm text-gray-500">
                                  ID: {account.ma_nguoi_dung}
                                </p>
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div>
                              <p className="text-sm text-gray-900 flex items-center">
                                <MapPin className="w-4 h-4 mr-1 text-gray-400" />
                                {account.email}
                              </p>
                              {account.so_dien_thoai && (
                                <p className="text-sm text-gray-500 flex items-center mt-1">
                                  <Phone className="w-4 h-4 mr-1" />
                                  {account.so_dien_thoai}
                                </p>
                              )}
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <span
                              className={`px-2 py-1 rounded-full text-xs font-medium ${
                                account.vai_tro === "admin"
                                  ? "bg-purple-100 text-purple-800"
                                  : "bg-blue-100 text-blue-800"
                              }`}
                            >
                              {account.vai_tro === "admin"
                                ? "Qu·∫£n tr·ªã vi√™n"
                                : "Kh√°ch h√†ng"}
                            </span>
                          </td>
                          <td className="px-6 py-4">
                            <span
                              className={`px-2 py-1 rounded-full text-xs font-medium ${
                                account.trang_thai === "active" ||
                                account.trang_thai === "hoat_dong"
                                  ? "bg-green-100 text-green-800"
                                  : "bg-red-100 text-red-800"
                              }`}
                            >
                              {account.trang_thai === "active" ||
                              account.trang_thai === "hoat_dong"
                                ? "Ho·∫°t ƒë·ªông"
                                : "B·ªã kh√≥a"}
                            </span>
                          </td>
                          <td className="px-6 py-4">
                            <button
                              onClick={() =>
                                loadOrdersByUserId(
                                  account.ma_nguoi_dung,
                                  account
                                )
                              }
                              className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                            >
                              <ShoppingBag className="w-4 h-4 mr-1" />
                              Xem ƒë∆°n h√†ng
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>

                {/* Pagination cho Users */}
                {totalPagesAccounts > 1 && (
                  <div className="bg-white px-6 py-4 border-t border-gray-200">
                    <div className="flex items-center justify-between">
                      <div className="text-sm text-gray-700">
                        Hi·ªÉn th·ªã{" "}
                        <span className="font-medium">
                          {(currentPage - 1) * ITEMS_PER_PAGE + 1}
                        </span>{" "}
                        ƒë·∫øn{" "}
                        <span className="font-medium">
                          {Math.min(
                            currentPage * ITEMS_PER_PAGE,
                            filteredAccounts.length
                          )}
                        </span>{" "}
                        trong t·ªïng s·ªë{" "}
                        <span className="font-medium">
                          {filteredAccounts.length}
                        </span>{" "}
                        ng∆∞·ªùi d√πng
                      </div>
                      <div className="flex space-x-2">
                        <button
                          onClick={() =>
                            setCurrentPage(Math.max(1, currentPage - 1))
                          }
                          disabled={currentPage === 1}
                          className="px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                          Tr∆∞·ªõc
                        </button>
                        <span className="px-4 py-2 text-sm font-medium text-gray-700">
                          {currentPage} / {totalPagesAccounts}
                        </span>
                        <button
                          onClick={() =>
                            setCurrentPage(
                              Math.min(totalPagesAccounts, currentPage + 1)
                            )
                          }
                          disabled={currentPage === totalPagesAccounts}
                          className="px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                          Sau
                        </button>
                      </div>
                    </div>
                  </div>
                )}
              </>
            )}
          </div>
        )}

        {/* Orders Table */}
        {view === "orders" && (
          <div className="bg-white rounded-2xl shadow-lg overflow-hidden">
            {isLoadingOrders ? (
              <div className="text-center py-12">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                <p className="mt-2 text-gray-600">
                  ƒêang t·∫£i danh s√°ch ƒë∆°n h√†ng...
                </p>
              </div>
            ) : orders.length > 0 ? (
              <>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-gray-50 border-b border-gray-200">
                      <tr>
                        <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          ƒê∆°n h√†ng
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Kh√°ch h√†ng
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Thanh to√°n
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Tr·∫°ng th√°i
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Ng√†y t·∫°o
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Thao t√°c
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {paginatedOrders.map((order) => (
                        <tr
                          key={order.ma_don_hang}
                          className="hover:bg-gray-50 transition-colors"
                        >
                          <td className="px-6 py-4">
                            <div>
                              <p className="font-medium text-gray-900">
                                #{order.ma_don_hang}
                              </p>
                              <p className="text-sm text-green-600 font-medium">
                                {new Intl.NumberFormat("vi-VN", {
                                  style: "currency",
                                  currency: "VND",
                                }).format(Number(order.tong_thanh_toan))}
                              </p>
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div>
                              <p className="font-medium text-gray-900 flex items-center">
                                <User className="w-4 h-4 mr-1 text-gray-400" />
                                {order.ten_nguoi_nhan}
                              </p>
                              <p className="text-sm text-gray-500 flex items-center mt-1">
                                <Phone className="w-4 h-4 mr-1" />
                                {order.so_dien_thoai}
                              </p>
                              <p className="text-sm text-gray-500 flex items-center mt-1">
                                <MapPin className="w-4 h-4 mr-1" />
                                {order.dia_chi_giao.length > 50
                                  ? `${order.dia_chi_giao.substring(0, 50)}...`
                                  : order.dia_chi_giao}
                              </p>
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div className="flex items-center">
                              <CreditCard className="w-4 h-4 mr-2 text-gray-400" />
                              <span className="text-sm font-medium">
                                {order.hinh_thuc_thanh_toan}
                              </span>
                            </div>
                            <div className="text-xs text-gray-500 mt-1">
                              {order.da_thanh_toan
                                ? "ƒê√£ thanh to√°n"
                                : "Ch∆∞a thanh to√°n"}
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div className="flex items-center space-x-2">
                              {getStatusInfo(order.trang_thai).icon}
                              <span
                                className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusInfo(order.trang_thai).color}`}
                              >
                                {getStatusInfo(order.trang_thai).text}
                              </span>
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div className="text-sm text-gray-900">
                              {new Date(order.Ngay_Tao).toLocaleDateString(
                                "vi-VN"
                              )}
                            </div>
                            <div className="text-xs text-gray-500">
                              {new Date(order.Ngay_Tao).toLocaleTimeString(
                                "vi-VN"
                              )}
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <button
                              onClick={() =>
                                setSelectedOrderId(order.ma_don_hang)
                              }
                              className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                            >
                              <Eye className="w-4 h-4 mr-1" />
                              Chi ti·∫øt
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>

                {/* Pagination cho Orders */}
                {totalPagesOrders > 1 && (
                  <div className="bg-white px-6 py-4 border-t border-gray-200">
                    <div className="flex items-center justify-between">
                      <div className="text-sm text-gray-700">
                        Hi·ªÉn th·ªã{" "}
                        <span className="font-medium">
                          {(currentPage - 1) * ITEMS_PER_PAGE + 1}
                        </span>{" "}
                        ƒë·∫øn{" "}
                        <span className="font-medium">
                          {Math.min(
                            currentPage * ITEMS_PER_PAGE,
                            filteredOrders.length
                          )}
                        </span>{" "}
                        trong t·ªïng s·ªë{" "}
                        <span className="font-medium">
                          {filteredOrders.length}
                        </span>{" "}
                        ƒë∆°n h√†ng
                      </div>
                      <div className="flex space-x-2">
                        <button
                          onClick={() =>
                            setCurrentPage(Math.max(1, currentPage - 1))
                          }
                          disabled={currentPage === 1}
                          className="px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                          Tr∆∞·ªõc
                        </button>
                        <span className="px-4 py-2 text-sm font-medium text-gray-700">
                          {currentPage} / {totalPagesOrders}
                        </span>
                        <button
                          onClick={() =>
                            setCurrentPage(
                              Math.min(totalPagesOrders, currentPage + 1)
                            )
                          }
                          disabled={currentPage === totalPagesOrders}
                          className="px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                          Sau
                        </button>
                      </div>
                    </div>
                  </div>
                )}
              </>
            ) : (
              <div className="text-center py-12">
                <ShoppingBag className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-xl font-medium text-gray-900 mb-2">
                  Ng∆∞·ªùi d√πng n√†y ch∆∞a c√≥ ƒë∆°n h√†ng n√†o
                </h3>
                <p className="text-gray-500">
                  {selectedUser?.ho_ten} ch∆∞a th·ª±c hi·ªán ƒë∆°n h√†ng n√†o
                </p>
                <button
                  onClick={backToUsers}
                  className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Quay l·∫°i danh s√°ch ng∆∞·ªùi d√πng
                </button>
              </div>
            )}
          </div>
        )}

        {/* Pending Orders Table */}
        {view === "pending-orders" && (
          <div className="bg-white rounded-2xl shadow-lg overflow-hidden">
            {isLoadingPendingOrders ? (
              <div className="text-center py-12">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600"></div>
                <p className="mt-2 text-gray-600">
                  ƒêang t·∫£i danh s√°ch ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n...
                </p>
              </div>
            ) : pendingOrders.length > 0 ? (
              <>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-orange-50 border-b border-orange-200">
                      <tr>
                        <th className="px-6 py-4 text-left text-xs font-medium text-orange-700 uppercase tracking-wider">
                          ƒê∆°n h√†ng
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-orange-700 uppercase tracking-wider">
                          Kh√°ch h√†ng
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-orange-700 uppercase tracking-wider">
                          Thanh to√°n
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-orange-700 uppercase tracking-wider">
                          Tr·∫°ng th√°i
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-orange-700 uppercase tracking-wider">
                          Ng√†y t·∫°o
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-orange-700 uppercase tracking-wider">
                          Thao t√°c
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {paginatedPendingOrders.map((order) => (
                        <tr
                          key={order.ma_don_hang}
                          className="hover:bg-orange-50 transition-colors"
                        >
                          <td className="px-6 py-4">
                            <div>
                              <p className="font-medium text-gray-900">
                                #{order.ma_don_hang}
                              </p>
                              <p className="text-sm text-green-600 font-medium">
                                {new Intl.NumberFormat("vi-VN", {
                                  style: "currency",
                                  currency: "VND",
                                }).format(Number(order.tong_thanh_toan))}
                              </p>
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div>
                              <p className="font-medium text-gray-900 flex items-center">
                                <User className="w-4 h-4 mr-1 text-gray-400" />
                                {order.ten_nguoi_nhan}
                              </p>
                              <p className="text-sm text-gray-500 flex items-center mt-1">
                                <Phone className="w-4 h-4 mr-1" />
                                {order.so_dien_thoai}
                              </p>
                              <p className="text-sm text-gray-500 flex items-center mt-1">
                                <MapPin className="w-4 h-4 mr-1" />
                                {order.dia_chi_giao.length > 50
                                  ? `${order.dia_chi_giao.substring(0, 50)}...`
                                  : order.dia_chi_giao}
                              </p>
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div className="flex items-center">
                              <CreditCard className="w-4 h-4 mr-2 text-gray-400" />
                              <span className="text-sm font-medium">
                                {order.hinh_thuc_thanh_toan}
                              </span>
                            </div>
                            <div className="text-xs text-gray-500 mt-1">
                              {order.da_thanh_toan
                                ? "ƒê√£ thanh to√°n"
                                : "Ch∆∞a thanh to√°n"}
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div className="flex items-center space-x-2">
                              {getStatusInfo(order.trang_thai).icon}
                              <span
                                className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusInfo(order.trang_thai).color}`}
                              >
                                {getStatusInfo(order.trang_thai).text}
                              </span>
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div className="text-sm text-gray-900">
                              {new Date(order.Ngay_Tao).toLocaleDateString(
                                "vi-VN"
                              )}
                            </div>
                            <div className="text-xs text-gray-500">
                              {new Date(order.Ngay_Tao).toLocaleTimeString(
                                "vi-VN"
                              )}
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div className="flex space-x-2">
                              <button
                                onClick={() =>
                                  setSelectedOrderId(order.ma_don_hang)
                                }
                                className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                              >
                                <Eye className="w-4 h-4 mr-1" />
                                Chi ti·∫øt
                              </button>
                              <button
                                onClick={() =>
                                  handleApproveOrder(order.ma_don_hang)
                                }
                                className="inline-flex items-center px-3 py-2 bg-green-600 text-white shadow-sm text-sm leading-4 font-medium rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors"
                              >
                                <CheckCircle className="w-4 h-4 mr-1" />
                                Duy·ªát
                              </button>
                              <button
                                onClick={() =>
                                  handleRejectOrder(order.ma_don_hang)
                                }
                                className="inline-flex items-center px-3 py-2 bg-red-600 text-white shadow-sm text-sm leading-4 font-medium rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors"
                              >
                                <XCircle className="w-4 h-4 mr-1" />
                                T·ª´ ch·ªëi
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>

                {/* Pagination cho Pending Orders */}
                {totalPagesPendingOrders > 1 && (
                  <div className="bg-white px-6 py-4 border-t border-gray-200">
                    <div className="flex items-center justify-between">
                      <div className="text-sm text-gray-700">
                        Hi·ªÉn th·ªã{" "}
                        <span className="font-medium">
                          {(currentPage - 1) * ITEMS_PER_PAGE + 1}
                        </span>{" "}
                        ƒë·∫øn{" "}
                        <span className="font-medium">
                          {Math.min(
                            currentPage * ITEMS_PER_PAGE,
                            filteredPendingOrders.length
                          )}
                        </span>{" "}
                        trong t·ªïng s·ªë{" "}
                        <span className="font-medium">
                          {filteredPendingOrders.length}
                        </span>{" "}
                        ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n
                      </div>
                      <div className="flex space-x-2">
                        <button
                          onClick={() =>
                            setCurrentPage(Math.max(1, currentPage - 1))
                          }
                          disabled={currentPage === 1}
                          className="px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                          Tr∆∞·ªõc
                        </button>
                        <span className="px-4 py-2 text-sm font-medium text-gray-700">
                          {currentPage} / {totalPagesPendingOrders}
                        </span>
                        <button
                          onClick={() =>
                            setCurrentPage(
                              Math.min(totalPagesPendingOrders, currentPage + 1)
                            )
                          }
                          disabled={currentPage === totalPagesPendingOrders}
                          className="px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                          Sau
                        </button>
                      </div>
                    </div>
                  </div>
                )}
              </>
            ) : (
              <div className="text-center py-12">
                <FileCheck className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-xl font-medium text-gray-900 mb-2">
                  Kh√¥ng c√≥ ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n n√†o
                </h3>
                <p className="text-gray-500">
                  Hi·ªán t·∫°i kh√¥ng c√≥ ƒë∆°n h√†ng n√†o c·∫ßn duy·ªát
                </p>
                <button
                  onClick={backToUsers}
                  className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Quay l·∫°i danh s√°ch ng∆∞·ªùi d√πng
                </button>
              </div>
            )}
          </div>
        )}

        {/* Confirmed Orders Table */}
        {view === "confirmed-orders" && (
          <div className="bg-white rounded-2xl shadow-lg overflow-hidden">
            {isLoadingConfirmedOrders ? (
              <div className="text-center py-12">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-green-600"></div>
                <p className="mt-2 text-gray-600">
                  ƒêang t·∫£i danh s√°ch ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n...
                </p>
              </div>
            ) : confirmedOrders.length > 0 ? (
              <>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-green-50 border-b border-green-200">
                      <tr>
                        <th className="px-6 py-4 text-left text-xs font-medium text-green-700 uppercase tracking-wider">
                          ƒê∆°n h√†ng
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-green-700 uppercase tracking-wider">
                          Kh√°ch h√†ng
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-green-700 uppercase tracking-wider">
                          Thanh to√°n
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-green-700 uppercase tracking-wider">
                          Tr·∫°ng th√°i
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-green-700 uppercase tracking-wider">
                          V·∫≠n ƒë∆°n
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-green-700 uppercase tracking-wider">
                          Ng√†y t·∫°o
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-green-700 uppercase tracking-wider">
                          Thao t√°c
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {paginatedConfirmedOrders.map((order) => (
                        <tr
                          key={order.ma_don_hang}
                          className="hover:bg-green-50 transition-colors"
                        >
                          <td className="px-6 py-4">
                            <div>
                              <p className="font-medium text-gray-900">
                                #{order.ma_don_hang}
                              </p>
                              <p className="text-sm text-green-600 font-medium">
                                {new Intl.NumberFormat("vi-VN", {
                                  style: "currency",
                                  currency: "VND",
                                }).format(Number(order.tong_thanh_toan))}
                              </p>
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div>
                              <p className="font-medium text-gray-900 flex items-center">
                                <User className="w-4 h-4 mr-1 text-gray-400" />
                                {order.ten_nguoi_nhan}
                              </p>
                              <p className="text-sm text-gray-500 flex items-center mt-1">
                                <Phone className="w-4 h-4 mr-1" />
                                {order.so_dien_thoai}
                              </p>
                              <p className="text-sm text-gray-500 flex items-center mt-1">
                                <MapPin className="w-4 h-4 mr-1" />
                                {order.dia_chi_giao.length > 50
                                  ? `${order.dia_chi_giao.substring(0, 50)}...`
                                  : order.dia_chi_giao}
                              </p>
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div className="flex items-center">
                              <CreditCard className="w-4 h-4 mr-2 text-gray-400" />
                              <span className="text-sm font-medium">
                                {order.hinh_thuc_thanh_toan}
                              </span>
                            </div>
                            <div className="text-xs text-gray-500 mt-1">
                              {order.da_thanh_toan
                                ? "ƒê√£ thanh to√°n"
                                : "Ch∆∞a thanh to√°n"}
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div className="flex items-center space-x-2">
                              {getStatusInfo(order.trang_thai).icon}
                              <span
                                className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusInfo(order.trang_thai).color}`}
                              >
                                {getStatusInfo(order.trang_thai).text}
                              </span>
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div className="flex items-center space-x-2">
                              <Truck className="w-4 h-4 text-gray-400" />
                              <div>
                                {order.ma_van_don ? (
                                  <>
                                    <p className="text-sm font-medium text-gray-900">
                                      {order.ma_van_don}
                                    </p>
                                    <p className="text-xs text-gray-500">
                                      {order.don_vi_van_chuyen || "GHN"}
                                    </p>
                                  </>
                                ) : (
                                  <p className="text-sm text-gray-500">
                                    Ch∆∞a c√≥ m√£ v·∫≠n ƒë∆°n
                                  </p>
                                )}
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div className="text-sm text-gray-900">
                              {new Date(order.Ngay_Tao).toLocaleDateString(
                                "vi-VN"
                              )}
                            </div>
                            <div className="text-xs text-gray-500">
                              {new Date(order.Ngay_Tao).toLocaleTimeString(
                                "vi-VN"
                              )}
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <div className="flex space-x-2">
                              <button
                                onClick={() =>
                                  setSelectedOrderId(order.ma_don_hang)
                                }
                                className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                              >
                                <Eye className="w-4 h-4 mr-1" />
                                Chi ti·∫øt
                              </button>
                              {!order.ma_van_don && (
                                <button
                                  onClick={() =>
                                    handleCreateGHNOrder(
                                      order.ma_don_hang,
                                      order
                                    )
                                  }
                                  className="inline-flex items-center px-3 py-2 bg-blue-600 text-white shadow-sm text-sm leading-4 font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                                >
                                  <Truck className="w-4 h-4 mr-1" />
                                  T·∫°o v·∫≠n ƒë∆°n GHN
                                </button>
                              )}
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>

                {/* Pagination cho Confirmed Orders */}
                {totalPagesConfirmedOrders > 1 && (
                  <div className="bg-white px-6 py-4 border-t border-gray-200">
                    <div className="flex items-center justify-between">
                      <div className="text-sm text-gray-700">
                        Hi·ªÉn th·ªã{" "}
                        <span className="font-medium">
                          {(currentPage - 1) * ITEMS_PER_PAGE + 1}
                        </span>{" "}
                        ƒë·∫øn{" "}
                        <span className="font-medium">
                          {Math.min(
                            currentPage * ITEMS_PER_PAGE,
                            filteredConfirmedOrders.length
                          )}
                        </span>{" "}
                        trong t·ªïng s·ªë{" "}
                        <span className="font-medium">
                          {filteredConfirmedOrders.length}
                        </span>{" "}
                        ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n
                      </div>
                      <div className="flex space-x-2">
                        <button
                          onClick={() =>
                            setCurrentPage(Math.max(1, currentPage - 1))
                          }
                          disabled={currentPage === 1}
                          className="px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                          Tr∆∞·ªõc
                        </button>
                        <span className="px-4 py-2 text-sm font-medium text-gray-700">
                          {currentPage} / {totalPagesConfirmedOrders}
                        </span>
                        <button
                          onClick={() =>
                            setCurrentPage(
                              Math.min(
                                totalPagesConfirmedOrders,
                                currentPage + 1
                              )
                            )
                          }
                          disabled={currentPage === totalPagesConfirmedOrders}
                          className="px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                          Sau
                        </button>
                      </div>
                    </div>
                  </div>
                )}
              </>
            ) : (
              <div className="text-center py-12">
                <CheckCircle className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-xl font-medium text-gray-900 mb-2">
                  Kh√¥ng c√≥ ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n n√†o
                </h3>
                <p className="text-gray-500">
                  Hi·ªán t·∫°i kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n
                </p>
                <button
                  onClick={backToUsers}
                  className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Quay l·∫°i danh s√°ch ng∆∞·ªùi d√πng
                </button>
              </div>
            )}
          </div>
        )}

        {/* Cancel Return Requests Table */}
        {view === "cancel-return-requests" && (
          <div className="bg-white rounded-2xl shadow-lg overflow-hidden">
            {isLoadingCancelReturnRequests ? (
              <div className="text-center py-12">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-red-600"></div>
                <p className="mt-2 text-gray-600">
                  ƒêang t·∫£i danh s√°ch y√™u c·∫ßu H·ªßy/tr·∫£...
                </p>
              </div>
            ) : cancelReturnRequests.length > 0 ? (
              <>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-red-50 border-b border-red-200">
                      <tr>
                        <th className="px-6 py-4 text-left text-xs font-medium text-red-700 uppercase tracking-wider">
                          ƒê∆°n h√†ng
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-red-700 uppercase tracking-wider">
                          Kh√°ch h√†ng
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-red-700 uppercase tracking-wider">
                          Y√™u c·∫ßu
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-red-700 uppercase tracking-wider">
                          Thanh to√°n
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-red-700 uppercase tracking-wider">
                          Tr·∫°ng th√°i
                        </th>
                        <th className="px-6 py-4 text-left text-xs font-medium text-red-700 uppercase tracking-wider">
                          Ng√†y t·∫°o
                        </th>
                        <th className="px-6 py-4 text-center text-xs font-medium text-red-700 uppercase tracking-wider">
                          Thao t√°c
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {paginatedCancelReturnRequests.map((order) => {
                        const statusStyles =
                          order.trang_thai === "Ch·ªù X√°c Nh·∫≠n"
                            ? "bg-yellow-100 text-yellow-800"
                            : order.trang_thai === "ƒêang Giao"
                              ? "bg-blue-100 text-blue-800"
                              : order.trang_thai === "Ho√†n Th√†nh"
                                ? "bg-green-100 text-green-800"
                                : "bg-red-100 text-red-800";

                        return (
                          <tr
                            key={order.ma_don_hang}
                            className="hover:bg-gray-50"
                          >
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div>
                                <div className="text-sm font-medium text-gray-900">
                                  #{order.ma_don_hang}
                                </div>
                                <div className="text-sm text-gray-500">
                                  {new Intl.NumberFormat("vi-VN", {
                                    style: "currency",
                                    currency: "VND",
                                  }).format(Number(order.tong_thanh_toan))}
                                </div>
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div>
                                <div className="text-sm font-medium text-gray-900">
                                  {order.ten_nguoi_nhan}
                                </div>
                                <div className="text-sm text-gray-500">
                                  {order.so_dien_thoai}
                                </div>
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div>
                                <div className="text-sm font-medium text-red-600">
                                  {order.yeu_cau_huy_tra || "H·ªßy/Tr·∫£ h√†ng"}
                                </div>
                                <div className="text-xs text-gray-500">
                                  {order.ly_do_huy_tra ||
                                    "Xem chi ti·∫øt ƒë·ªÉ bi·∫øt l√Ω do"}
                                </div>
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="text-sm text-gray-900">
                                {order.hinh_thuc_thanh_toan}
                              </div>
                              <div className="flex items-center mt-1">
                                <div
                                  className={`text-xs ${
                                    order.da_thanh_toan === 1
                                      ? "text-green-600"
                                      : "text-gray-500"
                                  }`}
                                >
                                  {order.da_thanh_toan === 1
                                    ? "‚úì ƒê√£ thanh to√°n"
                                    : "‚óã Ch∆∞a thanh to√°n"}
                                </div>
                                {order.da_thanh_toan === 1 &&
                                  (order.hinh_thuc_thanh_toan === "VNPay" ||
                                    order.hinh_thuc_thanh_toan ===
                                      "ZaloPay") && (
                                    <div className="ml-2 px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                                      üí∞ C√≥ th·ªÉ ho√†n ti·ªÅn
                                    </div>
                                  )}
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span
                                className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${statusStyles}`}
                              >
                                {order.trang_thai}
                              </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {new Date(order.Ngay_Tao).toLocaleDateString(
                                "vi-VN"
                              )}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-center">
                              <div className="flex justify-center space-x-2">
                                <button
                                  onClick={() =>
                                    setSelectedOrderId(order.ma_don_hang)
                                  }
                                  className="inline-flex items-center px-3 py-1 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-colors"
                                >
                                  <Eye className="w-4 h-4 mr-1" />
                                  Chi ti·∫øt
                                </button>

                                {/* Ch·ªâ hi·ªÉn th·ªã n√∫t x√°c nh·∫≠n n·∫øu ƒë∆°n h√†ng ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω */}
                                {(order.trang_thai === "Ch·ªù X√°c Nh·∫≠n" ||
                                  order.trang_thai === "cho_xu_ly") && (
                                  <>
                                    <button
                                      onClick={() =>
                                        handleConfirmCancelReturn(
                                          order.ma_don_hang,
                                          "Ch·∫•p Nh·∫≠n",
                                          order
                                        )
                                      }
                                      className="inline-flex items-center px-3 py-1 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700 transition-colors"
                                      title="Ch·∫•p nh·∫≠n y√™u c·∫ßu h·ªßy/tr·∫£"
                                    >
                                      <CheckCircle className="w-4 h-4 mr-1" />
                                      Ch·∫•p nh·∫≠n
                                    </button>

                                    <button
                                      onClick={() =>
                                        handleConfirmCancelReturn(
                                          order.ma_don_hang,
                                          "T·ª´ Ch·ªëi",
                                          order
                                        )
                                      }
                                      className="inline-flex items-center px-3 py-1 bg-red-600 text-white text-sm rounded-lg hover:bg-red-700 transition-colors"
                                      title="T·ª´ ch·ªëi y√™u c·∫ßu h·ªßy/tr·∫£"
                                    >
                                      <XCircle className="w-4 h-4 mr-1" />
                                      T·ª´ ch·ªëi
                                    </button>
                                  </>
                                )}
                              </div>
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>

                {/* Pagination cho Cancel Return Requests */}
                {totalPagesCancelReturnRequests > 1 && (
                  <div className="bg-white px-6 py-4 border-t border-gray-200">
                    <div className="flex items-center justify-between">
                      <div className="text-sm text-gray-700">
                        Hi·ªÉn th·ªã{" "}
                        <span className="font-medium">
                          {(currentPage - 1) * ITEMS_PER_PAGE + 1}
                        </span>{" "}
                        ƒë·∫øn{" "}
                        <span className="font-medium">
                          {Math.min(
                            currentPage * ITEMS_PER_PAGE,
                            filteredCancelReturnRequests.length
                          )}
                        </span>{" "}
                        trong t·ªïng s·ªë{" "}
                        <span className="font-medium">
                          {filteredCancelReturnRequests.length}
                        </span>{" "}
                        y√™u c·∫ßu H·ªßy/tr·∫£
                      </div>
                      <div className="flex space-x-2">
                        <button
                          onClick={() =>
                            setCurrentPage(Math.max(1, currentPage - 1))
                          }
                          disabled={currentPage === 1}
                          className="px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                          Tr∆∞·ªõc
                        </button>
                        <span className="px-3 py-2 text-sm text-gray-700">
                          Trang {currentPage} / {totalPagesCancelReturnRequests}
                        </span>
                        <button
                          onClick={() =>
                            setCurrentPage(
                              Math.min(
                                totalPagesCancelReturnRequests,
                                currentPage + 1
                              )
                            )
                          }
                          disabled={
                            currentPage === totalPagesCancelReturnRequests
                          }
                          className="px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                          Sau
                        </button>
                      </div>
                    </div>
                  </div>
                )}
              </>
            ) : (
              <div className="text-center py-12">
                <AlertCircle className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-xl font-medium text-gray-900 mb-2">
                  Kh√¥ng c√≥ y√™u c·∫ßu H·ªßy/tr·∫£ n√†o
                </h3>
                <p className="text-gray-500">
                  Hi·ªán t·∫°i kh√¥ng c√≥ y√™u c·∫ßu H·ªßy/tr·∫£ h√†ng n√†o
                </p>
                <button
                  onClick={backToUsers}
                  className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Quay l·∫°i danh s√°ch ng∆∞·ªùi d√πng
                </button>
              </div>
            )}
          </div>
        )}

        {/* Empty state cho Users */}
        {view === "users" && !isLoading && filteredAccounts.length === 0 && (
          <div className="bg-white rounded-2xl shadow-lg p-12 text-center">
            <Users className="w-16 h-16 text-gray-300 mx-auto mb-4" />
            <h3 className="text-xl font-medium text-gray-900 mb-2">
              Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o
            </h3>
            <p className="text-gray-500">
              {searchQuery
                ? "Th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c"
                : "H·ªá th·ªëng ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o"}
            </p>
          </div>
        )}

        {/* Modal chi ti·∫øt ƒë∆°n h√†ng */}
        {selectedOrderId && (
          <OrderDetailModal
            orderId={selectedOrderId}
            onClose={() => setSelectedOrderId(null)}
          />
        )}
      </div>
    </div>
  );
};

export default QLDonHang;
